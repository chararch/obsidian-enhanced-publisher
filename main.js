/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EnhancedPublisherPlugin
});
module.exports = __toCommonJS(main_exports);

// src/main.ts
var import_obsidian11 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  wechatAppId: "",
  wechatAppSecret: "",
  autoSaveImages: true,
  hideImageFolders: true
};
var EnhancedPublisherSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("\u589E\u5F3A\u53D1\u5E03\u63D2\u4EF6\u8BBE\u7F6E").setHeading();
    new import_obsidian.Setting(containerEl).setName("\u81EA\u52A8\u4FDD\u5B58\u56FE\u7247").setDesc("\u7C98\u8D34\u56FE\u7247\u65F6\u81EA\u52A8\u4FDD\u5B58\u5230\u6587\u6863\u540C\u540D\u6587\u4EF6\u5939").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoSaveImages).onChange(async (value) => {
      this.plugin.settings.autoSaveImages = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u9690\u85CF\u56FE\u7247\u6587\u4EF6\u5939").setDesc("\u5728\u6587\u4EF6\u6D4F\u89C8\u5668\u4E2D\u9690\u85CF\u56FE\u7247\u6587\u4EF6\u5939(__assets)\u5E76\u5C06\u56FE\u7247\u96C6\u6210\u5230\u6587\u6863\u4E2D\u3002\u542F\u7528\u540E\u53EF\u4EE5\u70B9\u51FB\u6587\u6863\u540D\u5C55\u5F00/\u6298\u53E0\u67E5\u770B\u56FE\u7247\u3002").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideImageFolders).onChange(async (value) => {
      this.plugin.settings.hideImageFolders = value;
      await this.plugin.saveSettings();
      new import_obsidian.Notice(`\u56FE\u7247\u6587\u4EF6\u5939\u5DF2${value ? "\u9690\u85CF\uFF0C\u53EF\u70B9\u51FB\u6587\u6863\u67E5\u770B\u56FE\u7247" : "\u663E\u793A"}`);
    }));
    new import_obsidian.Setting(containerEl).setName("\u5FAE\u4FE1\u516C\u4F17\u53F7\u8BBE\u7F6E").setHeading();
    new import_obsidian.Setting(containerEl).setName("AppID").setDesc("\u5FAE\u4FE1\u516C\u4F17\u53F7\u7684AppID").setClass("wechat-setting-appid").addText((text) => text.setPlaceholder("\u8F93\u5165AppID").setValue(this.plugin.settings.wechatAppId).onChange(async (value) => {
      this.plugin.settings.wechatAppId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("AppSecret").setDesc("\u5FAE\u4FE1\u516C\u4F17\u53F7\u7684AppSecret").setClass("wechat-setting-appsecret").addText((text) => text.setPlaceholder("\u8F93\u5165AppSecret").setValue(this.plugin.settings.wechatAppSecret).onChange(async (value) => {
      this.plugin.settings.wechatAppSecret = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/image-handler.ts
var import_obsidian2 = require("obsidian");

// src/constants.ts
var CONSTANTS = {
  // 资源文件夹后缀
  ASSETS_FOLDER_SUFFIX: "__assets",
  // 图片扩展名列表
  IMAGE_EXTENSIONS: [".png", ".jpg", ".jpeg", ".gif", ".svg", ".webp", ".bmp"],
  // 视频扩展名列表（为未来扩展准备）
  VIDEO_EXTENSIONS: [".mp4", ".webm", ".ogv", ".mov"],
  // 音频扩展名列表（为未来扩展准备）
  AUDIO_EXTENSIONS: [".mp3", ".wav", ".ogg", ".flac", ".m4a"],
  // DOM选择器
  SELECTORS: {
    FILE_EXPLORER: '.nav-files-container, .workspace-leaf-content[data-type="file-explorer"]',
    IMAGE_FOLDERS: '.nav-folder-title[data-path$="__assets"], .tree-item-self[data-path$="__assets"]',
    DOCUMENT_WITH_IMAGES: ".has-images",
    IMAGE_CONTAINER: ".document-images-container",
    EXPAND_INDICATOR: ".image-expand-indicator"
  },
  // DOM类名和ID
  STYLE_ELEMENT_ID: "enhanced-publisher-styles",
  CONTAINER_CLASS: "document-images-container",
  INDICATOR_CLASS: "image-expand-indicator",
  HAS_IMAGES_CLASS: "has-images",
  // 其他配置
  DEBOUNCE_DELAY: 100,
  // 防抖延迟时间，单位毫秒
  // 事件名称
  EVENTS: {
    REFRESH_CONTAINERS: "enhanced-publisher:refresh-containers",
    TOGGLE_ALL_CONTAINERS: "enhanced-publisher:toggle-all-containers"
  },
  // 图片类型和文件扩展名映射
  IMAGE_TYPE_MAP: {
    "image/png": "png",
    "image/jpeg": "jpg",
    "image/jpg": "jpg",
    "image/gif": "gif",
    "image/svg+xml": "svg",
    "image/webp": "webp",
    "image/bmp": "bmp"
  },
  // 文件扩展名和MIME类型映射
  MIME_TYPE_MAP: {
    "png": "image/png",
    "jpg": "image/jpeg",
    "jpeg": "image/jpeg",
    "gif": "image/gif",
    "svg": "image/svg+xml",
    "webp": "image/webp",
    "bmp": "image/bmp"
  }
};

// src/image-handler.ts
async function handlePasteEvent(evt, editor, view) {
  var _a;
  if (!((_a = evt.clipboardData) == null ? void 0 : _a.files.length)) {
    return;
  }
  const file = evt.clipboardData.files[0];
  if (!file.type.startsWith("image/")) {
    return;
  }
  evt.preventDefault();
  const activeFile = view.file;
  if (!activeFile) {
    new import_obsidian2.Notice("\u65E0\u6CD5\u786E\u5B9A\u5F53\u524D\u6587\u4EF6");
    return;
  }
  try {
    const assetsPath = activeFile.path.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
    let folder = this.app.vault.getAbstractFileByPath(assetsPath);
    if (!folder) {
      folder = await this.app.vault.createFolder(assetsPath);
    }
    const timeStr = new Date().toISOString().replace(/[-:TZ\.]/g, "");
    const extension = CONSTANTS.IMAGE_TYPE_MAP[file.type] || "png";
    const fileName = `image-${timeStr}.${extension}`;
    const filePath = `${assetsPath}/${fileName}`;
    const buffer = await file.arrayBuffer();
    await this.app.vault.createBinary(filePath, buffer);
    const imageMd = `![[${fileName}]]`;
    editor.replaceSelection(imageMd);
    new import_obsidian2.Notice(`\u56FE\u7247\u5DF2\u4FDD\u5B58\u81F3: ${filePath}`);
    refreshAfterImageSave.call(this, activeFile.path, filePath);
  } catch (error) {
    console.error("\u4FDD\u5B58\u7C98\u8D34\u56FE\u7247\u65F6\u51FA\u9519:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    new import_obsidian2.Notice(`\u4FDD\u5B58\u56FE\u7247\u5931\u8D25: ${errorMessage}`);
  }
}
function refreshAfterImageSave(docPath, imagePath) {
  window.requestAnimationFrame(() => {
    try {
      const folderPath = docPath.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
      const plugin = this;
      if (plugin.viewManager) {
        plugin.viewManager.refreshDocumentView(docPath, true);
        console.log(`[\u56FE\u7247\u5904\u7406] \u5F3A\u5236\u5237\u65B0\u6587\u6863 ${docPath} \u7684\u56FE\u7247\u89C6\u56FE`);
      } else {
        console.log(`[\u56FE\u7247\u5904\u7406] \u6CA1\u6709\u627E\u5230viewManager\uFF0C\u65E0\u6CD5\u5237\u65B0\u6587\u6863\u89C6\u56FE`);
      }
    } catch (error) {
      console.error("[\u56FE\u7247\u5904\u7406] \u5237\u65B0\u56FE\u7247\u5BB9\u5668\u65F6\u51FA\u9519:", error);
    }
  });
}

// src/html-preview.ts
var import_obsidian3 = require("obsidian");
var HTML_PREVIEW_VIEW_TYPE = "enhanced-publisher-html-preview";
var HtmlPreviewView = class extends import_obsidian3.ItemView {
  constructor(leaf, plugin, htmlContent, documentTitle = "HTML\u9884\u89C8", originalMarkdownPath = null) {
    super(leaf);
    this.originalMarkdownPath = null;
    // 存储原始Markdown文件路径
    this.documentListener = null;
    this.plugin = plugin;
    this.htmlContent = htmlContent;
    this.documentTitle = documentTitle;
    this.originalMarkdownPath = originalMarkdownPath;
    if (originalMarkdownPath) {
      this.registerActiveDocumentListener(originalMarkdownPath);
      this.registerFileChangeListener();
    }
  }
  // 注册文档内容变化的监听
  registerActiveDocumentListener(filePath) {
    this.removeDocumentListener();
    this.documentListener = {
      event: "editor-change",
      eventRef: this.plugin.app.workspace.on("editor-change", async (editor, viewInfo) => {
        const markdownView = viewInfo instanceof import_obsidian3.MarkdownView ? viewInfo : null;
        if (markdownView && markdownView.file && markdownView.file.path === filePath) {
          await this.refreshPreview(markdownView);
        }
      })
    };
    this.plugin.registerEvent(this.documentListener.eventRef);
  }
  // 完全重写的文件变化监听方法
  registerFileChangeListener() {
    this.plugin.registerEvent(
      this.plugin.app.vault.on("rename", async (file, oldPath) => {
        if (this.originalMarkdownPath === oldPath) {
          this.originalMarkdownPath = file.path;
          this.registerActiveDocumentListener(file.path);
          if (file instanceof import_obsidian3.TFile && file.extension === "md") {
            await this.refreshContentAfterRename(file);
          }
        }
      })
    );
    this.plugin.registerEvent(
      this.plugin.app.vault.on("delete", (file) => {
        if (this.originalMarkdownPath === file.path) {
          this.handleFileDeletion();
        }
      })
    );
  }
  // 处理文件删除的方法
  handleFileDeletion() {
    this.removeDocumentListener();
    const existingWarnings = this.contentEl.querySelectorAll(".html-preview-warning");
    existingWarnings.forEach((el) => el.remove());
    const warning = this.contentEl.createEl("div", { cls: "html-preview-warning" });
    warning.style.padding = "15px";
    warning.style.backgroundColor = "#ff5555";
    warning.style.color = "white";
    warning.style.textAlign = "center";
    warning.style.position = "sticky";
    warning.style.top = "0";
    warning.style.zIndex = "1000";
    warning.style.fontWeight = "bold";
    warning.style.borderBottom = "3px solid black";
    warning.style.fontSize = "16px";
    warning.style.boxShadow = "0 2px 5px rgba(0,0,0,0.3)";
    warning.textContent = "\u26A0\uFE0F \u8B66\u544A\uFF1A\u539F\u59CB\u6587\u6863\u5DF2\u88AB\u5220\u9664\u6216\u91CD\u547D\u540D\uFF0C\u8BE5\u9884\u89C8\u5185\u5BB9\u5C06\u4E0D\u4F1A\u518D\u66F4\u65B0";
    this.contentEl.prepend(warning);
  }
  // 移除文档监听器
  removeDocumentListener() {
    if (this.documentListener) {
      this.plugin.app.workspace.offref(this.documentListener.eventRef);
      this.documentListener = null;
    }
  }
  // 刷新预览内容
  async refreshPreview(markdownView) {
    try {
      const content = markdownView.getViewData();
      const htmlContent = await markdownToHtml.call(this.plugin, content);
      this.htmlContent = htmlContent;
      await this.onOpen();
      const statusBarItem = this.leaf.view.containerEl.querySelector(".html-preview-title");
      if (statusBarItem) {
        const originalBackground = statusBarItem.style.backgroundColor;
        statusBarItem.style.backgroundColor = "var(--interactive-success)";
        setTimeout(() => {
          if (statusBarItem) {
            statusBarItem.style.backgroundColor = originalBackground;
          }
        }, 500);
      }
    } catch (error) {
      console.error("\u5237\u65B0HTML\u9884\u89C8\u5931\u8D25:", error);
    }
  }
  getViewType() {
    return HTML_PREVIEW_VIEW_TYPE;
  }
  getDisplayText() {
    return this.documentTitle;
  }
  // 渲染视图内容
  async onOpen() {
    var _a;
    this.contentEl.empty();
    const toolbar = this.contentEl.createDiv({ cls: "html-preview-toolbar" });
    toolbar.style.display = "flex";
    toolbar.style.justifyContent = "space-between";
    toolbar.style.alignItems = "center";
    toolbar.style.padding = "10px";
    toolbar.style.borderBottom = "1px solid var(--background-modifier-border)";
    const titleArea = toolbar.createDiv({ cls: "html-preview-title-area" });
    const title = titleArea.createEl("span", { cls: "html-preview-title" });
    title.textContent = this.documentTitle;
    title.style.fontWeight = "bold";
    title.style.cursor = "text";
    title.style.userSelect = "text";
    const buttonArea = toolbar.createDiv({ cls: "html-preview-button-area" });
    buttonArea.style.display = "flex";
    buttonArea.style.gap = "10px";
    const copyButton = buttonArea.createEl("button", { cls: "html-preview-copy-button" });
    copyButton.textContent = "\u590D\u5236\u5230\u5185\u5BB9\u5E73\u53F0";
    copyButton.style.backgroundColor = "var(--interactive-accent)";
    copyButton.style.color = "var(--text-on-accent)";
    copyButton.style.border = "none";
    copyButton.style.borderRadius = "4px";
    copyButton.style.padding = "5px 10px";
    copyButton.style.cursor = "pointer";
    copyButton.addEventListener("click", async () => {
      try {
        const container = document.createElement("div");
        container.style.position = "absolute";
        container.style.left = "-9999px";
        container.innerHTML = this.htmlContent;
        document.body.appendChild(container);
        const images = container.querySelectorAll("img");
        for (const img of Array.from(images)) {
          const src = img.getAttribute("src");
          if (src && (src.startsWith("app://") || src.startsWith("data:") === false)) {
            try {
              let fileName = src.split("/").pop();
              if (!fileName)
                continue;
              if (fileName.includes("?")) {
                fileName = fileName.split("?")[0];
              }
              const currentFile = this.originalMarkdownPath ? this.plugin.app.vault.getAbstractFileByPath(this.originalMarkdownPath) : null;
              if (!(currentFile instanceof import_obsidian3.TFile)) {
                console.error("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u6587\u6863");
                continue;
              }
              const vaultPath = await findAttachmentPath(this.plugin, currentFile, fileName);
              if (!vaultPath) {
                console.error(`\u65E0\u6CD5\u627E\u5230\u56FE\u7247\u6587\u4EF6: ${fileName}`);
                continue;
              }
              const imgFile = this.plugin.app.vault.getAbstractFileByPath(vaultPath);
              if (imgFile instanceof import_obsidian3.TFile) {
                const arrayBuffer = await this.plugin.app.vault.readBinary(imgFile);
                const base64String = arrayBufferToBase64(arrayBuffer);
                const mimeType = getMimeType(imgFile.extension);
                img.src = `data:${mimeType};base64,${base64String}`;
              }
            } catch (imgError) {
              console.error("\u5904\u7406\u56FE\u7247\u5931\u8D25:", imgError);
            }
          }
        }
        const richTextBlob = new Blob([container.innerHTML], { type: "text/html" });
        const plainTextBlob = new Blob([container.textContent || ""], { type: "text/plain" });
        await navigator.clipboard.write([
          new ClipboardItem({
            "text/html": richTextBlob,
            "text/plain": plainTextBlob
          })
        ]);
        document.body.removeChild(container);
        new import_obsidian3.Notice("\u5185\u5BB9\u5DF2\u590D\u5236\u5230\u526A\u8D34\u677F\uFF08\u5305\u542B\u56FE\u7247\uFF09\uFF0C\u4F60\u53EF\u4EE5\u7C98\u8D34\u5230\u5185\u5BB9\u53D1\u5E03\u5E73\u53F0\u4E86");
      } catch (err) {
        console.error("\u590D\u5236\u5931\u8D25:", err);
        new import_obsidian3.Notice("\u590D\u5236\u5931\u8D25: " + (err instanceof Error ? err.message : String(err)));
        try {
          await navigator.clipboard.writeText(this.htmlContent);
          new import_obsidian3.Notice("\u5DF2\u4F7F\u7528\u5907\u7528\u65B9\u5F0F\u590D\u5236\u5185\u5BB9\uFF08\u4E0D\u542B\u56FE\u7247\uFF09");
        } catch (fallbackErr) {
          new import_obsidian3.Notice("\u590D\u5236\u5B8C\u5168\u5931\u8D25\uFF0C\u8BF7\u91CD\u8BD5");
        }
      }
    });
    const publishButton = buttonArea.createEl("button", { cls: "html-preview-publish-button" });
    publishButton.textContent = "\u53D1\u5E03\u5230\u5185\u5BB9\u5E73\u53F0";
    publishButton.style.backgroundColor = "var(--interactive-accent)";
    publishButton.style.color = "var(--text-on-accent)";
    publishButton.style.border = "none";
    publishButton.style.borderRadius = "4px";
    publishButton.style.padding = "5px 10px";
    publishButton.style.cursor = "pointer";
    publishButton.addEventListener("click", () => {
      if (this.originalMarkdownPath) {
        this.plugin.app.workspace.openLinkText(this.originalMarkdownPath, "", false).then(async () => {
          var _a2;
          const markdownView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
          if (markdownView) {
            if (((_a2 = markdownView.file) == null ? void 0 : _a2.path) === this.originalMarkdownPath) {
              const showPublishModal2 = this.plugin.showPublishModal;
              if (typeof showPublishModal2 === "function") {
                showPublishModal2.call(this.plugin, markdownView);
              } else {
                new import_obsidian3.Notice("\u53D1\u5E03\u529F\u80FD\u4E0D\u53EF\u7528");
                console.error("\u65E0\u6CD5\u627E\u5230showPublishModal\u51FD\u6570");
              }
            } else {
              new import_obsidian3.Notice(`\u65E0\u6CD5\u6253\u5F00\u539F\u59CB\u6587\u6863: ${this.documentTitle}`);
            }
          } else {
            new import_obsidian3.Notice(`\u65E0\u6CD5\u627E\u5230\u539F\u59CB\u6587\u6863: ${this.documentTitle}`);
          }
        }).catch((error) => {
          console.error("\u6253\u5F00\u539F\u59CB\u6587\u6863\u5931\u8D25:", error);
          new import_obsidian3.Notice(`\u6253\u5F00\u539F\u59CB\u6587\u6863\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
        });
      } else {
        new import_obsidian3.Notice("\u65E0\u6CD5\u786E\u5B9A\u8981\u53D1\u5E03\u7684\u539F\u59CB\u6587\u6863");
      }
    });
    const contentContainer = this.contentEl.createDiv({ cls: "html-preview-content" });
    contentContainer.style.height = "calc(100% - 50px)";
    contentContainer.style.overflow = "hidden";
    const iframe = contentContainer.createEl("iframe", { cls: "html-preview-iframe" });
    iframe.style.width = "100%";
    iframe.style.height = "100%";
    iframe.style.border = "none";
    iframe.style.display = "block";
    iframe.onload = () => {
      if (iframe.contentDocument) {
        const doc = iframe.contentDocument;
        const style = doc.createElement("style");
        style.textContent = `
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                        padding: 20px;
                        margin: 0;
                        line-height: 1.6;
                    }
                    img {
                        max-width: 100%;
                    }
                    pre {
                        background-color: #f5f5f5;
                        padding: 10px;
                        overflow: auto;
                        border-radius: 3px;
                    }
                    code {
                        font-family: Consolas, Monaco, 'Andale Mono', monospace;
                    }
                `;
        doc.head.appendChild(style);
        doc.body.innerHTML = this.htmlContent;
      }
    };
    const frameDoc = iframe.contentDocument || ((_a = iframe.contentWindow) == null ? void 0 : _a.document);
    if (frameDoc) {
      frameDoc.open();
      frameDoc.write("<!DOCTYPE html><html><head></head><body></body></html>");
      frameDoc.close();
    }
  }
  // 关闭视图时清理资源
  async onClose() {
    this.removeDocumentListener();
    this.contentEl.empty();
  }
  // 当视图被卸载时清理资源
  onunload() {
    this.removeDocumentListener();
  }
  // 文件重命名后刷新内容的专用方法
  async refreshContentAfterRename(file) {
    try {
      if (file instanceof import_obsidian3.TFile && file.extension === "md") {
        this.documentTitle = file.basename || "\u672A\u547D\u540D\u6587\u6863";
        const fileContent = await this.plugin.app.vault.read(file);
        const htmlContent = await markdownToHtml.call(this.plugin, fileContent);
        this.htmlContent = htmlContent;
        await this.onOpen();
        new import_obsidian3.Notice(`\u5DF2\u66F4\u65B0HTML\u9884\u89C8: ${this.documentTitle}`);
        const titleEl = this.contentEl.querySelector(".html-preview-title");
        if (titleEl) {
          titleEl.textContent = this.documentTitle;
        }
      }
    } catch (error) {
      console.error("\u5237\u65B0\u9884\u89C8\u5931\u8D25:", error);
      new import_obsidian3.Notice(`\u66F4\u65B0HTML\u9884\u89C8\u5931\u8D25: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
  // 主动检查并更新内容 - 在定时器中调用
  async checkAndRefreshContent() {
    if (!this.originalMarkdownPath)
      return;
    try {
      const exists = await this.plugin.app.vault.adapter.exists(this.originalMarkdownPath);
      if (exists) {
        const file = this.plugin.app.vault.getAbstractFileByPath(this.originalMarkdownPath);
        if (file instanceof import_obsidian3.TFile && file.extension === "md") {
          const fileContent = await this.plugin.app.vault.read(file);
          const htmlContent = await markdownToHtml.call(this.plugin, fileContent);
          if (this.htmlContent !== htmlContent) {
            this.htmlContent = htmlContent;
            this.documentTitle = file.basename || "\u672A\u547D\u540D\u6587\u6863";
            await this.onOpen();
            const titleEl = this.contentEl.querySelector(".html-preview-title");
            if (titleEl) {
              titleEl.textContent = this.documentTitle;
            }
          }
        }
      } else {
        this.handleFileDeletion();
      }
    } catch (error) {
      console.error("\u66F4\u65B0\u5185\u5BB9\u65F6\u51FA\u9519:", error);
    }
  }
};
async function showHtmlPreview(markdownView) {
  var _a, _b;
  try {
    const content = markdownView.getViewData();
    const htmlContent = await markdownToHtml.call(this, content);
    const documentTitle = ((_a = markdownView.file) == null ? void 0 : _a.basename) || "\u672A\u547D\u540D\u6587\u6863";
    const originalMarkdownPath = ((_b = markdownView.file) == null ? void 0 : _b.path) || null;
    let leaf;
    const existingLeaves = this.app.workspace.getLeavesOfType(HTML_PREVIEW_VIEW_TYPE);
    if (existingLeaves.length > 0) {
      leaf = existingLeaves[0];
    } else {
      leaf = this.app.workspace.getLeaf("split", "vertical");
      await leaf.setViewState({
        type: HTML_PREVIEW_VIEW_TYPE,
        active: true
      });
    }
    if (!leaf) {
      new import_obsidian3.Notice("\u65E0\u6CD5\u521B\u5EFAHTML\u9884\u89C8\u9875\u7B7E");
      return;
    }
    this.app.workspace.revealLeaf(leaf);
    if (leaf.view instanceof HtmlPreviewView) {
      leaf.view.htmlContent = htmlContent;
      if ("documentTitle" in leaf.view) {
        leaf.view.documentTitle = documentTitle;
      }
      if ("originalMarkdownPath" in leaf.view) {
        const oldPath = leaf.view.originalMarkdownPath;
        leaf.view.originalMarkdownPath = originalMarkdownPath;
        if ("hasShownDeletionNotice" in leaf.view) {
          leaf.view.hasShownDeletionNotice = false;
        }
        if (oldPath !== originalMarkdownPath && originalMarkdownPath) {
          leaf.view.registerActiveDocumentListener(originalMarkdownPath);
          leaf.view.registerFileChangeListener();
        }
      }
      const warnings = leaf.view.contentEl.querySelectorAll(".html-preview-warning");
      warnings.forEach((warning) => warning.remove());
      await leaf.view.onOpen();
    }
  } catch (error) {
    console.error("HTML\u9884\u89C8\u751F\u6210\u5931\u8D25:", error);
    new import_obsidian3.Notice(`HTML\u9884\u89C8\u751F\u6210\u5931\u8D25: ${error instanceof Error ? error.message : String(error)}`);
  }
}
async function markdownToHtml(markdown) {
  const processedMarkdown = markdown;
  const tempDiv = document.createElement("div");
  await import_obsidian3.MarkdownRenderer.renderMarkdown(
    processedMarkdown,
    tempDiv,
    "",
    this
  );
  const processImages = async () => {
    const images = tempDiv.querySelectorAll("img");
    for (const img of Array.from(images)) {
      await processImageSrc(img, img.getAttribute("src") || "", this);
    }
    const internalEmbeds = tempDiv.querySelectorAll("span.internal-embed");
    for (const span of Array.from(internalEmbeds)) {
      const src = span.getAttribute("src") || "";
      const alt = span.getAttribute("alt");
      if (src && isImageFile(src)) {
        const img = document.createElement("img");
        if (alt)
          img.setAttribute("alt", alt);
        img.style.maxWidth = "100%";
        await processImageSrc(img, src, this);
        if (span.parentNode) {
          span.parentNode.replaceChild(img, span);
        }
      }
    }
  };
  await processImages();
  return tempDiv.innerHTML;
}
function isImageFile(filename) {
  var _a;
  const ext = ((_a = filename.split(".").pop()) == null ? void 0 : _a.toLowerCase()) || "";
  return ["png", "jpg", "jpeg", "gif", "svg", "webp", "bmp"].includes(ext);
}
async function processImageSrc(img, src, plugin) {
  if (!src || src.startsWith("data:") || src.startsWith("http"))
    return;
  try {
    const activeFile = plugin.app.workspace.getActiveFile();
    if (!activeFile)
      return;
    const imgPath = await findAttachmentPath(plugin, activeFile, src);
    if (!imgPath) {
      console.error(`\u627E\u4E0D\u5230\u56FE\u7247: ${src}`);
      return;
    }
    const imgFile = plugin.app.vault.getAbstractFileByPath(imgPath);
    if (!(imgFile instanceof import_obsidian3.TFile)) {
      console.error(`\u56FE\u7247\u6587\u4EF6\u65E0\u6548: ${imgPath}`);
      return;
    }
    const resourceUrl = await plugin.app.vault.adapter.getResourcePath(imgPath);
    img.setAttribute("src", resourceUrl);
    img.style.maxWidth = "100%";
    img.style.height = "auto";
    img.style.objectFit = "contain";
  } catch (error) {
    console.error(`\u5904\u7406\u56FE\u7247\u5931\u8D25: ${src}`, error);
  }
}
async function findAttachmentPath(plugin, activeFile, filename) {
  if (await plugin.app.vault.adapter.exists(filename)) {
    return filename;
  }
  if (filename.startsWith("./") || filename.startsWith("../") || filename.startsWith("/")) {
    let resolvedPath = filename;
    if (filename.startsWith("./")) {
      const folderPath = activeFile.path.substring(0, activeFile.path.lastIndexOf("/"));
      resolvedPath = `${folderPath}/${filename.substring(2)}`;
    } else if (filename.startsWith("../")) {
      const folderPath = activeFile.path.substring(0, activeFile.path.lastIndexOf("/"));
      const parentPath = folderPath.substring(0, folderPath.lastIndexOf("/"));
      resolvedPath = `${parentPath}/${filename.substring(3)}`;
    } else if (filename.startsWith("/")) {
      resolvedPath = filename.substring(1);
    }
    if (await plugin.app.vault.adapter.exists(resolvedPath)) {
      return resolvedPath;
    }
  }
  const baseName = activeFile.path.substring(0, activeFile.path.lastIndexOf("."));
  const possiblePaths = [
    // 我们插件的格式：文档名__assets
    `${baseName}__assets/${filename}`,
    // Obsidian默认样式：文档名_attachments
    `${baseName}_attachments/${filename}`,
    // 同名文件夹
    `${baseName}/${filename}`,
    // 同目录
    `${activeFile.path.substring(0, activeFile.path.lastIndexOf("/"))}/${filename}`
  ];
  for (const path of possiblePaths) {
    if (await plugin.app.vault.adapter.exists(path)) {
      return path;
    }
  }
  const commonAttachmentFolders = [
    "attachments",
    "assets",
    "images",
    "resources",
    "_resources",
    "_attachments"
  ];
  for (const folder of commonAttachmentFolders) {
    const path = `${folder}/${filename}`;
    if (await plugin.app.vault.adapter.exists(path)) {
      return path;
    }
  }
  try {
    const linkpath = filename;
    const linkedFile = plugin.app.metadataCache.getFirstLinkpathDest(linkpath, activeFile.path);
    if (linkedFile && linkedFile instanceof import_obsidian3.TFile) {
      return linkedFile.path;
    }
    const files = plugin.app.vault.getFiles();
    const matchingFile = files.find((f) => f.name === filename);
    if (matchingFile) {
      return matchingFile.path;
    }
  } catch (error) {
    console.error("\u901A\u8FC7\u5143\u6570\u636EAPI\u67E5\u627E\u56FE\u7247\u5931\u8D25:", error);
  }
  try {
    const vaultFiles = plugin.app.vault.getFiles();
    for (const file of vaultFiles) {
      if (file.name === filename) {
        return file.path;
      }
    }
  } catch (error) {
    console.error("\u5728\u4FDD\u9669\u5E93\u4E2D\u641C\u7D22\u6587\u4EF6\u5931\u8D25:", error);
  }
  return null;
}
function arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  const len = bytes.byteLength;
  for (let i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}
function getMimeType(extension) {
  const mimeTypes = {
    "png": "image/png",
    "jpg": "image/jpeg",
    "jpeg": "image/jpeg",
    "gif": "image/gif",
    "svg": "image/svg+xml",
    "webp": "image/webp",
    "bmp": "image/bmp"
  };
  return mimeTypes[extension.toLowerCase()] || "application/octet-stream";
}

// src/ui/modals.ts
var import_obsidian6 = require("obsidian");

// src/publisher/wechat.ts
var import_obsidian5 = require("obsidian");

// src/types/metadata.ts
var import_obsidian4 = require("obsidian");
async function getOrCreateMetadata(vault, file) {
  if (!file.parent) {
    throw new Error("\u6587\u4EF6\u5FC5\u987B\u5728\u6587\u4EF6\u5939\u4E2D");
  }
  const assetsFolder = `${file.parent.path}/${file.basename}__assets`;
  const metadataPath = `${assetsFolder}/metadata.json`;
  try {
    const metadataFile = vault.getAbstractFileByPath(metadataPath);
    if (metadataFile instanceof import_obsidian4.TFile) {
      const content = await vault.read(metadataFile);
      return JSON.parse(content);
    }
    const newMetadata = {
      images: {}
    };
    if (!vault.getAbstractFileByPath(assetsFolder)) {
      await vault.createFolder(assetsFolder);
    }
    await vault.create(metadataPath, JSON.stringify(newMetadata, null, 2));
    return newMetadata;
  } catch (error) {
    console.error("\u5904\u7406\u5143\u6570\u636E\u6587\u4EF6\u65F6\u51FA\u9519:", error);
    throw error;
  }
}
async function updateMetadata(vault, file, metadata) {
  if (!file.parent) {
    throw new Error("\u6587\u4EF6\u5FC5\u987B\u5728\u6587\u4EF6\u5939\u4E2D");
  }
  const metadataPath = `${file.parent.path}/${file.basename}__assets/metadata.json`;
  await vault.adapter.write(metadataPath, JSON.stringify(metadata, null, 2));
}
function isImageUploaded(metadata, fileName) {
  return metadata.images[fileName] || null;
}
function addImageMetadata(metadata, fileName, imageData) {
  metadata.images[fileName] = imageData;
}
function updateDraftMetadata(metadata, draftData) {
  metadata.draft = {
    media_id: draftData.media_id,
    item: draftData.item,
    title: draftData.title,
    content: draftData.content,
    updateTime: Date.now()
  };
}

// src/publisher/wechat.ts
async function getWechatMaterials(page = 0, pageSize = 20) {
  try {
    const accessToken = await getAccessToken.call(this);
    if (!accessToken)
      return { items: [], totalCount: 0 };
    const materialsResponse = await (0, import_obsidian5.requestUrl)({
      url: `https://api.weixin.qq.com/cgi-bin/material/batchget_material?access_token=${accessToken}`,
      method: "POST",
      body: JSON.stringify({
        type: "image",
        offset: page * pageSize,
        count: pageSize
      })
    });
    if (materialsResponse.json.errcode && materialsResponse.json.errcode !== 0) {
      console.log("\u83B7\u53D6\u5FAE\u4FE1\u7D20\u6750\u5E93\u5931\u8D25: ", materialsResponse.json);
      new import_obsidian5.Notice(`\u83B7\u53D6\u5FAE\u4FE1\u7D20\u6750\u5E93\u5931\u8D25: ${materialsResponse.json.errmsg}`);
      return { items: [], totalCount: 0 };
    }
    const items = materialsResponse.json.item || [];
    const totalCount = materialsResponse.json.total_count || 0;
    const cacheKey = `wechat_material_cache_page_${page}`;
    const cacheData = {
      items,
      totalCount,
      lastUpdate: Date.now()
    };
    localStorage.setItem(cacheKey, JSON.stringify(cacheData));
    return { items, totalCount };
  } catch (error) {
    console.error("\u83B7\u53D6\u5FAE\u4FE1\u7D20\u6750\u5E93\u65F6\u51FA\u9519:", error);
    new import_obsidian5.Notice("\u83B7\u53D6\u5FAE\u4FE1\u7D20\u6750\u5E93\u65F6\u51FA\u9519");
    return { items: [], totalCount: 0 };
  }
}
async function uploadImageToWechat(imageData, fileName) {
  try {
    const accessToken = await getAccessToken.call(this);
    if (!accessToken)
      return "";
    const boundary = "----WebKitFormBoundary" + Math.random().toString(16).substring(2);
    const blob = new Blob([imageData]);
    const formDataHeader = `--${boundary}\r
Content-Disposition: form-data; name="media"; filename="${fileName}"\r
Content-Type: image/jpeg\r
\r
`;
    const formDataFooter = `\r
--${boundary}--`;
    const headerArray = new TextEncoder().encode(formDataHeader);
    const footerArray = new TextEncoder().encode(formDataFooter);
    const combinedBuffer = new Uint8Array(headerArray.length + blob.size + footerArray.length);
    combinedBuffer.set(headerArray, 0);
    const blobArray = new Uint8Array(await blob.arrayBuffer());
    combinedBuffer.set(blobArray, headerArray.length);
    combinedBuffer.set(footerArray, headerArray.length + blob.size);
    const uploadResponse = await (0, import_obsidian5.requestUrl)({
      url: `https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=${accessToken}&type=image`,
      method: "POST",
      headers: {
        "Content-Type": `multipart/form-data; boundary=${boundary}`
      },
      body: combinedBuffer.buffer
    });
    if (uploadResponse.json.errcode && uploadResponse.json.errcode !== 0) {
      console.log("\u4E0A\u4F20\u56FE\u7247\u5230\u5FAE\u4FE1\u5931\u8D25: ", uploadResponse.json);
      new import_obsidian5.Notice(`\u4E0A\u4F20\u56FE\u7247\u5230\u5FAE\u4FE1\u5931\u8D25: ${uploadResponse.json.errmsg}`);
      return "";
    }
    const mediaId = uploadResponse.json.media_id || "";
    if (mediaId) {
      const uploadedImagesCache = localStorage.getItem("wechat_uploaded_images_cache");
      const uploadedImages = uploadedImagesCache ? JSON.parse(uploadedImagesCache) : {};
      uploadedImages[mediaId] = {
        url: uploadResponse.json.url,
        name: fileName,
        uploadTime: Date.now()
      };
      localStorage.setItem("wechat_uploaded_images_cache", JSON.stringify(uploadedImages));
    }
    return mediaId;
  } catch (error) {
    console.error("\u4E0A\u4F20\u56FE\u7247\u5230\u5FAE\u4FE1\u65F6\u51FA\u9519:", error);
    new import_obsidian5.Notice("\u4E0A\u4F20\u56FE\u7247\u5230\u5FAE\u4FE1\u65F6\u51FA\u9519");
    return "";
  }
}
async function getAccessToken() {
  try {
    const cacheData = localStorage.getItem("wechat_token_cache");
    const cache = cacheData ? JSON.parse(cacheData) : null;
    if (cache && Date.now() < cache.expireTime) {
      console.log("\u4F7F\u7528\u7F13\u5B58\u7684\u8BBF\u95EE\u4EE4\u724C");
      return cache.token;
    }
    const tokenResponse = await (0, import_obsidian5.requestUrl)({
      url: `https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=${this.settings.wechatAppId}&secret=${this.settings.wechatAppSecret}`,
      method: "GET"
    });
    if (!tokenResponse.json.access_token) {
      console.log("\u83B7\u53D6\u5FAE\u4FE1\u8BBF\u95EE\u4EE4\u724C\u5931\u8D25: ", tokenResponse.json);
      new import_obsidian5.Notice("\u83B7\u53D6\u5FAE\u4FE1\u8BBF\u95EE\u4EE4\u724C\u5931\u8D25");
      return "";
    }
    const accessToken = tokenResponse.json.access_token;
    const expireTime = Date.now() + 66e5;
    const newCache = {
      token: accessToken,
      expireTime
    };
    localStorage.setItem("wechat_token_cache", JSON.stringify(newCache));
    return accessToken;
  } catch (error) {
    console.error("\u83B7\u53D6\u5FAE\u4FE1\u8BBF\u95EE\u4EE4\u724C\u65F6\u51FA\u9519:", error);
    new import_obsidian5.Notice("\u83B7\u53D6\u5FAE\u4FE1\u8BBF\u95EE\u4EE4\u724C\u65F6\u51FA\u9519");
    return "";
  }
}
async function uploadImageAndGetUrl(imageData, fileName) {
  try {
    const accessToken = await getAccessToken.call(this);
    if (!accessToken)
      return null;
    const boundary = "----WebKitFormBoundary" + Math.random().toString(16).substring(2);
    const blob = new Blob([imageData]);
    const formDataHeader = `--${boundary}\r
Content-Disposition: form-data; name="media"; filename="${fileName}"\r
Content-Type: image/jpeg\r
\r
`;
    const formDataFooter = `\r
--${boundary}--`;
    const headerArray = new TextEncoder().encode(formDataHeader);
    const footerArray = new TextEncoder().encode(formDataFooter);
    const combinedBuffer = new Uint8Array(headerArray.length + blob.size + footerArray.length);
    combinedBuffer.set(headerArray, 0);
    const blobArray = new Uint8Array(await blob.arrayBuffer());
    combinedBuffer.set(blobArray, headerArray.length);
    combinedBuffer.set(footerArray, headerArray.length + blob.size);
    const response = await (0, import_obsidian5.requestUrl)({
      url: `https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=${accessToken}&type=image`,
      method: "POST",
      headers: {
        "Content-Type": `multipart/form-data; boundary=${boundary}`
      },
      body: combinedBuffer.buffer
    });
    console.log(`response: ${JSON.stringify(response)}`);
    if (response.json.errcode) {
      throw new Error(response.json.errmsg);
    }
    return {
      url: response.json.url,
      media_id: response.json.media_id
    };
  } catch (error) {
    console.error("\u4E0A\u4F20\u56FE\u7247\u5931\u8D25:", error);
    return null;
  }
}
async function processDocumentImages(content, file) {
  try {
    if (!file.parent) {
      throw new Error("\u6587\u4EF6\u5FC5\u987B\u5728\u6587\u4EF6\u5939\u4E2D");
    }
    const metadata = await getOrCreateMetadata(this.app.vault, file);
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = content;
    const images = tempDiv.querySelectorAll("img");
    console.log(`images: ${images}`);
    for (const img of Array.from(images)) {
      const src = img.getAttribute("src");
      if (!src || src.startsWith("http"))
        continue;
      const imageUrl = await processImage.call(this, src, file, metadata);
      if (!imageUrl)
        continue;
      img.setAttribute("src", imageUrl);
    }
    return tempDiv.innerHTML;
  } catch (error) {
    console.error("\u5904\u7406\u6587\u6863\u56FE\u7247\u65F6\u51FA\u9519:", error);
    throw error;
  }
}
async function processImage(imagePath, file, metadata) {
  try {
    let fileName = imagePath.split("/").pop();
    if (!fileName)
      return null;
    if (fileName.includes("?")) {
      fileName = fileName.split("?")[0];
    }
    let imageMetadata = isImageUploaded(metadata, fileName);
    if (!imageMetadata) {
      const vaultPath = await findAttachmentPath(this, file, fileName);
      if (!vaultPath) {
        console.error(`\u65E0\u6CD5\u627E\u5230\u56FE\u7247\u6587\u4EF6: ${imagePath}`);
        return null;
      }
      const imageFile = this.app.vault.getAbstractFileByPath(vaultPath);
      if (!(imageFile instanceof import_obsidian5.TFile)) {
        console.error(`\u65E0\u6CD5\u627E\u5230\u56FE\u7247\u6587\u4EF6: ${vaultPath}`);
        return null;
      }
      const imageArrayBuffer = await this.app.vault.readBinary(imageFile);
      const uploadResult = await uploadImageAndGetUrl.call(this, imageArrayBuffer, fileName);
      if (!uploadResult)
        return null;
      imageMetadata = {
        fileName,
        url: uploadResult.url,
        media_id: uploadResult.media_id,
        uploadTime: Date.now()
      };
      addImageMetadata(metadata, fileName, imageMetadata);
      await updateMetadata(this.app.vault, file, metadata);
    }
    return imageMetadata.url;
  } catch (error) {
    console.error("\u5904\u7406\u56FE\u7247\u65F6\u51FA\u9519:", error);
    return null;
  }
}
async function publishToWechat(title, content, thumb_media_id, file) {
  var _a, _b, _c, _d;
  try {
    const accessToken = await getAccessToken.call(this);
    if (!accessToken)
      return false;
    const processedContent = await processDocumentImages.call(this, content, file);
    const metadata = await getOrCreateMetadata(this.app.vault, file);
    let updateData = {
      title,
      content: processedContent,
      media_id: (_a = metadata.draft) == null ? void 0 : _a.media_id,
      item: (_b = metadata.draft) == null ? void 0 : _b.item
    };
    let response;
    if ((_c = metadata.draft) == null ? void 0 : _c.media_id) {
      response = await (0, import_obsidian5.requestUrl)({
        url: `https://api.weixin.qq.com/cgi-bin/draft/update?access_token=${accessToken}`,
        method: "POST",
        body: JSON.stringify({
          media_id: metadata.draft.media_id,
          index: 0,
          articles: {
            title,
            content: processedContent,
            thumb_media_id,
            author: "",
            digest: "",
            show_cover_pic: thumb_media_id ? 1 : 0,
            content_source_url: "",
            need_open_comment: 0,
            only_fans_can_comment: 0
          }
        })
      });
      if (response.status === 200 && ((_d = response.json) == null ? void 0 : _d.media_id)) {
        updateData.media_id = response.json.media_id;
        updateData.item = response.json.item;
      }
    } else {
      response = await (0, import_obsidian5.requestUrl)({
        url: `https://api.weixin.qq.com/cgi-bin/draft/add?access_token=${accessToken}`,
        method: "POST",
        body: JSON.stringify({
          articles: [{
            title,
            content: processedContent,
            thumb_media_id,
            author: "",
            digest: "",
            show_cover_pic: thumb_media_id ? 1 : 0,
            content_source_url: "",
            need_open_comment: 0,
            only_fans_can_comment: 0
          }]
        })
      });
    }
    console.log(`response: ${JSON.stringify(response)}`);
    if (response.status === 200) {
      updateDraftMetadata(metadata, updateData);
      await updateMetadata(this.app.vault, file, metadata);
      new import_obsidian5.Notice("\u6210\u529F\u53D1\u5E03\u5230\u5FAE\u4FE1\u516C\u4F17\u53F7\u8349\u7A3F\u7BB1");
      return true;
    } else {
      new import_obsidian5.Notice(`\u53D1\u5E03\u5931\u8D25: ${response.json.errmsg || "\u672A\u77E5\u9519\u8BEF"}`);
      return false;
    }
  } catch (error) {
    console.error("\u53D1\u5E03\u5230\u5FAE\u4FE1\u65F6\u51FA\u9519:", error);
    new import_obsidian5.Notice("\u53D1\u5E03\u5230\u5FAE\u4FE1\u65F6\u51FA\u9519");
    return false;
  }
}

// src/ui/modals.ts
var CoverImageModal = class extends import_obsidian6.Modal {
  constructor(app, plugin, onImageSelected) {
    super(app);
    this.selectedMediaId = "";
    this.plugin = plugin;
    this.onImageSelected = onImageSelected;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("wechat-cover-image-modal");
    const modalEl = this.containerEl.querySelector(".modal");
    if (modalEl) {
      modalEl.classList.add("mod-wechat-cover");
    }
    contentEl.createEl("h2", { text: "\u9009\u62E9\u5C01\u9762\u56FE" });
    const tabsContainer = contentEl.createDiv({ cls: "wechat-cover-tabs" });
    const materialTab = tabsContainer.createDiv({ cls: "wechat-cover-tab" });
    materialTab.textContent = "\u7D20\u6750\u5E93";
    materialTab.style.borderBottom = "2px solid var(--interactive-accent)";
    const localTab = tabsContainer.createDiv({ cls: "wechat-cover-tab" });
    localTab.textContent = "\u672C\u5730\u56FE\u7247";
    const contentContainer = contentEl.createDiv({ cls: "wechat-cover-content" });
    const materialContent = contentContainer.createDiv({ cls: "wechat-material-content" });
    const loadingEl = materialContent.createEl("div", { text: "\u6B63\u5728\u52A0\u8F7D\u7D20\u6750..." });
    loadingEl.style.textAlign = "center";
    loadingEl.style.padding = "20px";
    const materialGrid = materialContent.createDiv({ cls: "material-grid" });
    const paginationContainer = materialContent.createDiv({ cls: "pagination-container" });
    const prevButton = paginationContainer.createEl("button", { text: "\u4E0A\u4E00\u9875" });
    prevButton.disabled = true;
    const pageInfo = paginationContainer.createEl("span");
    pageInfo.textContent = "\u7B2C1\u9875";
    const nextButton = paginationContainer.createEl("button", { text: "\u4E0B\u4E00\u9875" });
    nextButton.disabled = true;
    const localContent = contentContainer.createDiv({ cls: "wechat-local-content" });
    localContent.style.display = "none";
    const fileInputContainer = localContent.createDiv({ cls: "file-input-container" });
    const fileInput = fileInputContainer.createEl("input");
    fileInput.type = "file";
    fileInput.accept = "image/*";
    const imagePreviewContainer = localContent.createDiv({ cls: "image-preview-container" });
    const imagePreview = imagePreviewContainer.createEl("div", { cls: "image-preview" });
    imagePreview.textContent = "\u9884\u89C8\u533A\u57DF";
    const buttonContainer = contentEl.createDiv({ cls: "wechat-cover-buttons" });
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.marginTop = "20px";
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    const confirmButton = buttonContainer.createEl("button", {
      text: "\u786E\u8BA4",
      cls: "wechat-confirm-button"
    });
    confirmButton.disabled = true;
    confirmButton.style.backgroundColor = "var(--interactive-accent)";
    confirmButton.style.color = "var(--text-on-accent)";
    cancelButton.addEventListener("click", () => this.close());
    let currentPage = 0;
    const pageSize = 20;
    let totalCount = 0;
    const loadMaterialsPage = async (page) => {
      try {
        materialGrid.empty();
        loadingEl.style.display = "block";
        const materials = await getWechatMaterials.call(this.plugin, page, pageSize);
        if (materials.items.length === 0 && page === 0) {
          materialGrid.createEl("div", { text: "\u6CA1\u6709\u627E\u5230\u7D20\u6750\uFF0C\u8BF7\u4E0A\u4F20\u65B0\u56FE\u7247" });
          return;
        }
        totalCount = materials.totalCount;
        currentPage = page;
        pageInfo.textContent = `\u7B2C${page + 1}\u9875 / \u5171${Math.ceil(totalCount / pageSize)}\u9875`;
        prevButton.disabled = page === 0;
        nextButton.disabled = (page + 1) * pageSize >= totalCount;
        loadingEl.style.display = "none";
        for (const material of materials.items) {
          const materialItem = materialGrid.createDiv({ cls: "material-item" });
          const img = materialItem.createEl("img");
          img.src = material.url;
          const nameEl = materialItem.createEl("div", { text: material.name || "\u672A\u547D\u540D\u7D20\u6750" });
          nameEl.style.fontSize = "12px";
          materialItem.addEventListener("click", () => {
            const items = materialGrid.querySelectorAll(".material-item");
            items.forEach((item) => {
              item.style.border = "1px solid var(--background-modifier-border)";
            });
            materialItem.style.border = "2px solid var(--interactive-accent)";
            this.selectedMediaId = material.media_id;
            sessionStorage.setItem("selected_material", JSON.stringify({
              media_id: material.media_id,
              url: material.url,
              name: material.name
            }));
            if (!buttonContainer.querySelector(".confirm-button")) {
              const confirmButton2 = buttonContainer.createEl("button", {
                text: "\u786E\u8BA4\u9009\u62E9",
                cls: "confirm-button"
              });
              confirmButton2.addEventListener("click", () => {
                this.onImageSelected(this.selectedMediaId);
                this.close();
              });
            }
          });
        }
      } catch (error) {
        console.error("\u52A0\u8F7D\u7D20\u6750\u5E93\u5931\u8D25:", error);
        loadingEl.textContent = "\u52A0\u8F7D\u7D20\u6750\u5E93\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5";
      }
    };
    materialTab.addEventListener("click", () => {
      materialTab.style.borderBottom = "2px solid var(--interactive-accent)";
      localTab.style.borderBottom = "none";
      materialContent.style.display = "flex";
      localContent.style.display = "none";
    });
    localTab.addEventListener("click", () => {
      localTab.style.borderBottom = "2px solid var(--interactive-accent)";
      materialTab.style.borderBottom = "none";
      materialContent.style.display = "none";
      localContent.style.display = "flex";
    });
    fileInput.addEventListener("change", (e) => {
      const target = e.target;
      if (target.files && target.files.length > 0) {
        const selectedFile = target.files[0];
        const reader = new FileReader();
        reader.onload = (e2) => {
          if (e2.target && e2.target.result) {
            imagePreview.empty();
            const img = imagePreview.createEl("img");
            img.src = e2.target.result;
            img.style.maxWidth = "100%";
            img.style.maxHeight = "100%";
            sessionStorage.setItem("preview_image_url", e2.target.result);
          }
        };
        reader.readAsDataURL(selectedFile);
        confirmButton.disabled = false;
        sessionStorage.setItem("selected_file", JSON.stringify({
          name: selectedFile.name,
          type: selectedFile.type,
          size: selectedFile.size
        }));
      } else {
        imagePreview.textContent = "\u9884\u89C8\u533A\u57DF";
        confirmButton.disabled = true;
        sessionStorage.removeItem("preview_image_url");
        sessionStorage.removeItem("selected_file");
      }
    });
    confirmButton.addEventListener("click", () => {
      const selectedFileInfo = sessionStorage.getItem("selected_file");
      const previewImageUrl = sessionStorage.getItem("preview_image_url");
      if (!selectedFileInfo || !previewImageUrl) {
        new import_obsidian6.Notice("\u8BF7\u5148\u9009\u62E9\u56FE\u7247");
        return;
      }
      const fileInfo = JSON.parse(selectedFileInfo);
      sessionStorage.setItem("selected_material", JSON.stringify({
        media_id: "",
        // 此时还没有media_id
        url: previewImageUrl,
        name: fileInfo.name,
        isLocal: true,
        fileInfo
        // 保存文件信息，供后续上传使用
      }));
      this.onImageSelected("");
      this.close();
    });
    prevButton.addEventListener("click", () => {
      if (currentPage > 0) {
        loadMaterialsPage(currentPage - 1);
      }
    });
    nextButton.addEventListener("click", () => {
      if ((currentPage + 1) * pageSize < totalCount) {
        loadMaterialsPage(currentPage + 1);
      }
    });
    await loadMaterialsPage(0);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var PublishModal = class extends import_obsidian6.Modal {
  constructor(app, plugin, markdownView) {
    super(app);
    this.selectedCoverMediaId = "";
    this.plugin = plugin;
    this.markdownView = markdownView;
  }
  onOpen() {
    var _a;
    const { contentEl } = this;
    contentEl.empty();
    const modalEl = this.containerEl.querySelector(".modal");
    if (modalEl) {
      modalEl.classList.add("mod-publish");
    }
    contentEl.createEl("h2", { text: "\u53D1\u5E03\u5230\u5185\u5BB9\u5E73\u53F0" });
    const titleSetting = new import_obsidian6.Setting(contentEl).setName("\u6807\u9898").setDesc("\u6587\u7AE0\u6807\u9898");
    this.titleInput = document.createElement("input");
    this.titleInput.type = "text";
    this.titleInput.value = ((_a = this.markdownView.file) == null ? void 0 : _a.basename) || "";
    this.titleInput.style.width = "100%";
    titleSetting.controlEl.appendChild(this.titleInput);
    const platformSetting = new import_obsidian6.Setting(contentEl).setName("\u5E73\u53F0").setDesc("\u9009\u62E9\u53D1\u5E03\u5E73\u53F0");
    this.platformSelect = document.createElement("select");
    this.platformSelect.className = "enhanced-publisher-platform-selector";
    const wechatOption = document.createElement("option");
    wechatOption.value = "wechat";
    wechatOption.text = "\u5FAE\u4FE1\u516C\u4F17\u53F7";
    this.platformSelect.appendChild(wechatOption);
    platformSetting.controlEl.appendChild(this.platformSelect);
    const draftSetting = new import_obsidian6.Setting(contentEl).setName("\u8349\u7A3F").setDesc("\u5F53\u524D\u4EC5\u652F\u6301\u4FDD\u5B58\u5230\u8349\u7A3F\u7BB1\uFF0C\u540E\u7EED\u5C06\u652F\u6301\u76F4\u63A5\u53D1\u5E03");
    const draftCheckbox = document.createElement("input");
    draftCheckbox.type = "checkbox";
    draftCheckbox.checked = true;
    draftCheckbox.disabled = true;
    draftSetting.controlEl.appendChild(draftCheckbox);
    const coverImageSetting = new import_obsidian6.Setting(contentEl).setName("\u5C01\u9762\u56FE").setDesc("\u9009\u62E9\u6587\u7AE0\u5C01\u9762\u56FE");
    this.coverImagePreview = document.createElement("div");
    this.coverImagePreview.className = "enhanced-publisher-cover-preview";
    this.coverImagePreview.style.width = "120px";
    this.coverImagePreview.style.height = "80px";
    this.coverImagePreview.style.border = "1px dashed var(--background-modifier-border)";
    this.coverImagePreview.style.display = "flex";
    this.coverImagePreview.style.alignItems = "center";
    this.coverImagePreview.style.justifyContent = "center";
    this.coverImagePreview.style.marginRight = "10px";
    this.coverImagePreview.textContent = "\u65E0\u5C01\u9762\u56FE";
    const selectCoverButton = document.createElement("button");
    selectCoverButton.textContent = "\u9009\u62E9\u5C01\u9762\u56FE";
    selectCoverButton.addEventListener("click", () => {
      const coverImageModal = new CoverImageModal(this.app, this.plugin, (mediaId) => {
        this.selectedCoverMediaId = mediaId;
        this.coverImagePreview.empty();
        const img = document.createElement("img");
        img.style.maxWidth = "100%";
        img.style.maxHeight = "100%";
        const selectedMaterial = sessionStorage.getItem("selected_material");
        if (selectedMaterial) {
          const material = JSON.parse(selectedMaterial);
          if (material.url) {
            img.src = material.url;
            this.coverImagePreview.appendChild(img);
          } else {
            this.coverImagePreview.textContent = "\u5DF2\u9009\u62E9\u5C01\u9762\u56FE";
          }
        } else {
          this.coverImagePreview.textContent = "\u5DF2\u9009\u62E9\u5C01\u9762\u56FE";
        }
      });
      coverImageModal.open();
    });
    const coverImageContainer = document.createElement("div");
    coverImageContainer.style.display = "flex";
    coverImageContainer.style.alignItems = "center";
    coverImageContainer.appendChild(this.coverImagePreview);
    coverImageContainer.appendChild(selectCoverButton);
    coverImageSetting.controlEl.appendChild(coverImageContainer);
    const publishButtonContainer = contentEl.createDiv();
    publishButtonContainer.style.textAlign = "center";
    publishButtonContainer.style.marginTop = "30px";
    const publishButton = publishButtonContainer.createEl("button", {
      text: "\u53D1\u5E03",
      cls: "enhanced-publisher-publish-button"
    });
    publishButton.addEventListener("click", async () => {
      const title = this.titleInput.value;
      const platform = this.platformSelect.value;
      if (!title) {
        new import_obsidian6.Notice("\u8BF7\u8F93\u5165\u6807\u9898");
        return;
      }
      if (platform === "wechat" && !this.coverImagePreview.querySelector("img")) {
        new import_obsidian6.Notice("\u8BF7\u9009\u62E9\u5C01\u9762\u56FE");
        return;
      }
      if (!this.markdownView.file) {
        new import_obsidian6.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u6587\u4EF6");
        return;
      }
      const content = this.markdownView.getViewData();
      const htmlContent = await markdownToHtml.call(this.plugin, content);
      if (platform === "wechat") {
        if (!this.plugin.settings.wechatAppId || !this.plugin.settings.wechatAppSecret) {
          new import_obsidian6.Notice("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6E\u5FAE\u4FE1\u516C\u4F17\u53F7\u7684AppID\u548CAppSecret");
          return;
        }
        try {
          const selectedMaterial = sessionStorage.getItem("selected_material");
          if (selectedMaterial) {
            const material = JSON.parse(selectedMaterial);
            if (material.isLocal && !material.media_id) {
              publishButton.disabled = true;
              publishButton.textContent = "\u6B63\u5728\u4E0A\u4F20\u5C01\u9762\u56FE...";
              try {
                const response = await fetch(material.url);
                const blob = await response.blob();
                const buffer = await blob.arrayBuffer();
                const mediaId = await uploadImageToWechat.call(this.plugin, buffer, material.fileInfo.name);
                if (mediaId) {
                  this.selectedCoverMediaId = mediaId;
                  material.media_id = mediaId;
                  sessionStorage.setItem("selected_material", JSON.stringify(material));
                } else {
                  throw new Error("\u5C01\u9762\u56FE\u4E0A\u4F20\u5931\u8D25");
                }
              } catch (error) {
                console.error("\u4E0A\u4F20\u5C01\u9762\u56FE\u5931\u8D25:", error);
                new import_obsidian6.Notice("\u4E0A\u4F20\u5C01\u9762\u56FE\u5931\u8D25");
                publishButton.disabled = false;
                publishButton.textContent = "\u53D1\u5E03";
                return;
              }
            } else {
              this.selectedCoverMediaId = material.media_id;
            }
          }
          publishButton.textContent = "\u6B63\u5728\u53D1\u5E03...";
          const success = await this.plugin.publishToWechat(
            title,
            htmlContent,
            this.selectedCoverMediaId,
            this.markdownView.file
          );
          if (success) {
            this.close();
          }
        } catch (error) {
          console.error("\u53D1\u5E03\u5931\u8D25:", error);
          new import_obsidian6.Notice("\u53D1\u5E03\u5931\u8D25\uFF1A" + (error.message || "\u672A\u77E5\u9519\u8BEF"));
          publishButton.disabled = false;
          publishButton.textContent = "\u53D1\u5E03";
        }
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/publisher/index.ts
function showPublishModal(markdownView) {
  const modal = new PublishModal(this.app, this, markdownView);
  modal.open();
}

// src/managers/asset-manager.ts
var import_obsidian7 = require("obsidian");
var AssetManager = class {
  // 文档路径 -> 资源文件夹路径
  constructor(app) {
    this.cachedAssetFolders = /* @__PURE__ */ new Map();
    this.app = app;
  }
  /**
   * 初始化资源管理器
   */
  async initialize() {
    await this.detectAssetFolders();
  }
  /**
   * 检测所有资源文件夹
   */
  async detectAssetFolders() {
    this.cachedAssetFolders.clear();
    const folders = this.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian7.TFolder);
    for (const folder of folders) {
      if (folder.path.endsWith(CONSTANTS.ASSETS_FOLDER_SUFFIX)) {
        const docPath = folder.path.replace(CONSTANTS.ASSETS_FOLDER_SUFFIX, ".md");
        const docFile = this.app.vault.getAbstractFileByPath(docPath);
        if (docFile instanceof import_obsidian7.TFile) {
          this.cachedAssetFolders.set(docPath, folder.path);
        }
      }
    }
    return this.cachedAssetFolders;
  }
  /**
   * 获取文档对应的资源文件夹
   * @param docPath 文档路径
   * @returns 资源文件夹路径，如果不存在则返回null
   */
  getAssetFolderForDocument(docPath) {
    if (!this.cachedAssetFolders.has(docPath)) {
      const potentialAssetPath = docPath.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
      const assetFolder = this.app.vault.getAbstractFileByPath(potentialAssetPath);
      if (assetFolder instanceof import_obsidian7.TFolder) {
        this.cachedAssetFolders.set(docPath, potentialAssetPath);
        return potentialAssetPath;
      }
      return null;
    }
    return this.cachedAssetFolders.get(docPath) || null;
  }
  /**
   * 创建资源文件夹（如果不存在）
   * @param docPath 文档路径
   * @returns 创建的资源文件夹路径
   */
  async createAssetFolder(docPath) {
    const assetPath = docPath.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
    const existingFolder = this.app.vault.getAbstractFileByPath(assetPath);
    if (existingFolder instanceof import_obsidian7.TFolder) {
      return assetPath;
    }
    const pathParts = assetPath.split("/");
    let currentPath = "";
    for (let i = 0; i < pathParts.length; i++) {
      if (i === pathParts.length - 1) {
        await this.app.vault.createFolder(assetPath);
      } else {
        currentPath += (currentPath ? "/" : "") + pathParts[i];
        const folder = this.app.vault.getAbstractFileByPath(currentPath);
        if (!folder) {
          await this.app.vault.createFolder(currentPath);
        }
      }
    }
    this.cachedAssetFolders.set(docPath, assetPath);
    return assetPath;
  }
  /**
   * 重命名资源文件夹
   * @param oldDocPath 旧文档路径
   * @param newDocPath 新文档路径
   * @returns 是否成功
   */
  async renameAssetFolder(oldDocPath, newDocPath) {
    try {
      const oldFolderPath = oldDocPath.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
      const newFolderPath = newDocPath.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
      const folder = this.app.vault.getAbstractFileByPath(oldFolderPath);
      if (!(folder instanceof import_obsidian7.TFolder)) {
        return false;
      }
      const existingFolder = this.app.vault.getAbstractFileByPath(newFolderPath);
      if (existingFolder) {
        this.cachedAssetFolders.delete(oldDocPath);
        this.cachedAssetFolders.set(newDocPath, newFolderPath);
        return true;
      }
      try {
        await this.app.fileManager.renameFile(folder, newFolderPath);
        this.cachedAssetFolders.delete(oldDocPath);
        this.cachedAssetFolders.set(newDocPath, newFolderPath);
        return true;
      } catch (error) {
        if (error.message && error.message.includes("already exists")) {
          this.cachedAssetFolders.delete(oldDocPath);
          this.cachedAssetFolders.set(newDocPath, newFolderPath);
          return true;
        }
        console.error("\u91CD\u547D\u540D\u8D44\u6E90\u6587\u4EF6\u5939\u5931\u8D25:", error);
        return false;
      }
    } catch (error) {
      console.error("\u91CD\u547D\u540D\u8D44\u6E90\u6587\u4EF6\u5939\u5F02\u5E38:", error);
      return false;
    }
  }
  /**
   * 获取文件夹中的所有图片文件
   * @param folderPath 文件夹路径
   * @returns 图片文件列表
   */
  async getImagesInFolder(folderPath) {
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!(folder instanceof import_obsidian7.TFolder)) {
      return [];
    }
    const files = folder.children.filter((file) => file instanceof import_obsidian7.TFile && CONSTANTS.IMAGE_EXTENSIONS.includes(`.${file.extension}`));
    return files;
  }
  /**
   * 更新文档中的图片引用
   * @param docPath 文档路径
   * @param oldAssetFolder 旧资源文件夹路径
   * @param newAssetFolder 新资源文件夹路径
   * @returns 是否成功
   */
  async updateImageReferences(docPath, oldAssetFolder, newAssetFolder) {
    try {
      const docFile = this.app.vault.getAbstractFileByPath(docPath);
      if (!(docFile instanceof import_obsidian7.TFile)) {
        return false;
      }
      const content = await this.app.vault.read(docFile);
      const oldFolderName = oldAssetFolder.split("/").pop();
      const newFolderName = newAssetFolder.split("/").pop();
      if (!oldFolderName || !newFolderName) {
        return false;
      }
      const regex = new RegExp(oldFolderName, "g");
      const newContent = content.replace(regex, newFolderName);
      const hasChanges = content !== newContent;
      if (hasChanges) {
        await this.app.vault.modify(docFile, newContent);
      }
      return true;
    } catch (err) {
      console.error("\u66F4\u65B0\u56FE\u7247\u5F15\u7528\u5931\u8D25:", err);
      return false;
    }
  }
  /**
   * 从图片路径获取文档路径
   * @param imagePath 图片路径
   * @returns 对应的文档路径，如果无法确定则返回null
   */
  getDocumentPathFromImagePath(imagePath) {
    const parts = imagePath.split("/");
    for (let i = 0; i < parts.length; i++) {
      if (parts[i].endsWith(CONSTANTS.ASSETS_FOLDER_SUFFIX)) {
        const docPathParts = parts.slice(0, i + 1);
        const docPath = docPathParts.join("/").replace(CONSTANTS.ASSETS_FOLDER_SUFFIX, ".md");
        const docFile = this.app.vault.getAbstractFileByPath(docPath);
        if (docFile instanceof import_obsidian7.TFile) {
          return docPath;
        }
      }
    }
    return null;
  }
  /**
   * 判断文件路径是否在资源文件夹中
   * @param path 文件路径
   * @returns 是否在资源文件夹中
   */
  isInAssetFolder(path) {
    const parts = path.split("/");
    for (let i = 0; i < parts.length - 1; i++) {
      if (parts[i].endsWith(CONSTANTS.ASSETS_FOLDER_SUFFIX)) {
        return true;
      }
    }
    return false;
  }
};

// src/managers/document-manager.ts
var import_obsidian8 = require("obsidian");
var DocumentManager = class {
  constructor(app, assetManager) {
    this.app = app;
    this.assetManager = assetManager;
  }
  /**
   * 处理文档重命名 - 主要逻辑实现
   * @param file 新文件对象
   * @param oldPath 旧文件路径
   */
  async handleDocumentRename(file, oldPath) {
    try {
      const oldAssetFolder = oldPath.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
      const newAssetFolder = file.path.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
      const targetDoc = this.app.vault.getAbstractFileByPath(file.path);
      if (targetDoc && targetDoc !== file) {
        return false;
      }
      const success = await this.assetManager.renameAssetFolder(oldPath, file.path);
      if (!success) {
        return false;
      }
      const oldFolderName = oldAssetFolder.split("/").pop();
      const newFolderName = newAssetFolder.split("/").pop();
      if (oldFolderName && newFolderName && oldFolderName !== newFolderName) {
        await this.assetManager.updateImageReferences(file.path, oldAssetFolder, newAssetFolder);
      }
      return true;
    } catch (error) {
      console.error("\u5904\u7406\u6587\u6863\u91CD\u547D\u540D\u65F6\u51FA\u9519:", error);
      return false;
    }
  }
  /**
   * 处理图片重命名 - 更新文档中的图片引用
   * @param file 新图片文件
   * @param oldPath 旧图片路径
   * @returns 是否成功处理
   */
  async handleImageRename(file, oldPath) {
    if (!CONSTANTS.IMAGE_EXTENSIONS.includes(`.${file.extension}`)) {
      return false;
    }
    if (!this.isInAssetFolder(file.path)) {
      return false;
    }
    try {
      const docPath = this.assetManager.getDocumentPathFromImagePath(file.path);
      if (!docPath) {
        return false;
      }
      const docFile = this.app.vault.getAbstractFileByPath(docPath);
      if (!(docFile instanceof import_obsidian8.TFile)) {
        return false;
      }
      const content = await this.app.vault.read(docFile);
      const oldName = oldPath.split("/").pop();
      const newName = file.path.split("/").pop();
      if (!oldName || !newName)
        return false;
      const mdLinkRegex = new RegExp(`!\\[([^\\]]*)\\]\\([^)]*${oldName.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}\\)`, "g");
      const wikiLinkRegex = new RegExp(`!\\[\\[([^\\|]*)${oldName.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}(\\|[^\\]])?\\]\\]`, "g");
      let newContent = content.replace(mdLinkRegex, `![$1](${file.path})`).replace(wikiLinkRegex, (match, p1, p2) => {
        let basePath = p1;
        if (p1) {
          basePath = p1.endsWith("/") ? p1 : p1 + "/";
        }
        return `![[${basePath}${newName}${p2 || ""}]]`;
      });
      if (content !== newContent) {
        await this.app.vault.modify(docFile, newContent);
      }
      return true;
    } catch (error) {
      console.error("\u5904\u7406\u56FE\u7247\u91CD\u547D\u540D\u65F6\u51FA\u9519:", error);
      return false;
    }
  }
  /**
   * 判断文件路径是否在资源文件夹中
   * @param path 文件路径
   */
  isInAssetFolder(path) {
    return this.assetManager.isInAssetFolder(path);
  }
  /**
   * 检查文档是否包含对指定图片的引用
   * @param file 文档文件
   * @param imagePath 图片路径
   * @returns 是否包含引用
   */
  async documentContainsImageReference(file, imagePath) {
    try {
      const content = await this.app.vault.read(file);
      const imageName = imagePath.split("/").pop() || "";
      const referencePatterns = [
        // 绝对路径引用
        new RegExp(`!\\[.*?\\]\\(${this.escapeRegExp(imagePath)}[^)]*\\)`, "i"),
        new RegExp(`!\\[\\[${this.escapeRegExp(imagePath)}\\]\\]`, "i"),
        new RegExp(`<img[^>]*src=["']${this.escapeRegExp(imagePath)}["'][^>]*>`, "i"),
        // 相对路径引用
        new RegExp(`!\\[.*?\\]\\(.*?${this.escapeRegExp(imageName)}[^)]*\\)`, "i"),
        new RegExp(`!\\[\\[.*?${this.escapeRegExp(imageName)}\\]\\]`, "i"),
        new RegExp(`<img[^>]*src=["'].*?${this.escapeRegExp(imageName)}["'][^>]*>`, "i")
        // 无扩展名引用
        // new RegExp(`!\\[.*?\\]\\(${this.escapeRegExp(imagePathWithoutExt)}[^)]*\\)`, 'i'),
        // new RegExp(`!\\[\\[${this.escapeRegExp(imagePathWithoutExt)}\\]\\]`, 'i'),
        // new RegExp(`!\\[.*?\\]\\(.*?${this.escapeRegExp(imageNameWithoutExt)}[^)]*\\)`, 'i'),
        // new RegExp(`!\\[\\[.*?${this.escapeRegExp(imageNameWithoutExt)}\\]\\]`, 'i'),
      ];
      for (const pattern of referencePatterns) {
        if (pattern.test(content)) {
          return true;
        }
      }
      return false;
    } catch (error) {
      console.error(`\u68C0\u67E5\u6587\u6863 ${file.path} \u4E2D\u7684\u56FE\u7247\u5F15\u7528\u65F6\u51FA\u9519:`, error);
      return false;
    }
  }
  /**
   * 更新文档中的图片引用
   * @param file 文档文件
   * @param oldImagePath 旧图片路径
   * @param newImagePath 新图片路径
   * @returns 是否更新了文档
   */
  async updateImageReference(file, oldImagePath, newImagePath) {
    try {
      const content = await this.app.vault.read(file);
      const oldImageName = oldImagePath.split("/").pop() || "";
      const newImageName = newImagePath.split("/").pop() || "";
      const replacements = [
        // 完整路径替换
        [
          new RegExp(`(!\\[.*?\\]\\()${this.escapeRegExp(oldImagePath)}([^)]*)\\)`, "gi"),
          `$1${newImagePath}$2)`
        ],
        [
          new RegExp(`(!\\[\\[)${this.escapeRegExp(oldImagePath)}(\\]\\])`, "gi"),
          `$1${newImagePath}$2`
        ],
        [
          new RegExp(`(<img[^>]*src=["'])${this.escapeRegExp(oldImagePath)}(["'][^>]*>)`, "gi"),
          `$1${newImagePath}$2`
        ],
        // 仅文件名替换
        [
          new RegExp(`(!\\[.*?\\]\\()([^)]*)${this.escapeRegExp(oldImageName)}([^)]*)\\)`, "gi"),
          `$1$2${newImageName}$3)`
        ],
        [
          new RegExp(`(!\\[\\[)([^\\]]*)${this.escapeRegExp(oldImageName)}(\\]\\])`, "gi"),
          `$1$2${newImageName}$3`
        ],
        [
          new RegExp(`(<img[^>]*src=["'])([^"']*)${this.escapeRegExp(oldImageName)}(["'][^>]*>)`, "gi"),
          `$1$2${newImageName}$3`
        ]
        // 无扩展名路径替换
        // [
        //     new RegExp(`(!\\[.*?\\]\\()${this.escapeRegExp(oldImagePathWithoutExt)}([^)]*)\\)`, 'gi'), 
        //     `$1${newImagePathWithoutExt}$2)`
        // ],
        // [
        //     new RegExp(`(!\\[\\[)${this.escapeRegExp(oldImagePathWithoutExt)}(\\]\\])`, 'gi'), 
        //     `$1${newImagePathWithoutExt}$2`
        // ],
        // [
        //     new RegExp(`(!\\[.*?\\]\\()([^)]*)${this.escapeRegExp(oldImageNameWithoutExt)}([^)]*)\\)`, 'gi'), 
        //     `$1$2${newImageNameWithoutExt}$3)`
        // ],
        // [
        //     new RegExp(`(!\\[\\[)([^\\]]*)${this.escapeRegExp(oldImageNameWithoutExt)}(\\]\\])`, 'gi'), 
        //     `$1$2${newImageNameWithoutExt}$3`
        // ],
      ];
      let newContent = content;
      let changed = false;
      for (const [pattern, replacement] of replacements) {
        const updatedContent = newContent.replace(pattern, replacement);
        if (updatedContent !== newContent) {
          newContent = updatedContent;
          changed = true;
        }
      }
      if (changed) {
        await this.app.vault.modify(file, newContent);
        return true;
      }
      return false;
    } catch (error) {
      console.error(`\u66F4\u65B0\u6587\u6863 ${file.path} \u4E2D\u7684\u56FE\u7247\u5F15\u7528\u65F6\u51FA\u9519:`, error);
      return false;
    }
  }
  /**
   * 转义正则表达式特殊字符
   * @param string 需要转义的字符串
   * @returns 转义后的字符串
   */
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
  /**
   * 查找引用了指定图片的所有文档
   * 使用Obsidian的prepareSimpleSearch API高效搜索
   * @param imagePath 图片路径
   * @returns 包含引用的文档文件数组
   */
  async findDocumentsReferencingImage(imagePath) {
    try {
      const imageName = imagePath.split("/").pop() || "";
      const matchedDocs = /* @__PURE__ */ new Set();
      const mdFiles = this.app.vault.getMarkdownFiles();
      const associatedDocPath = this.assetManager.getDocumentPathFromImagePath(imagePath);
      if (associatedDocPath) {
        const docFile = this.app.vault.getAbstractFileByPath(associatedDocPath);
        if (docFile instanceof import_obsidian8.TFile) {
          const hasReference = await this.documentContainsImageReference(docFile, imagePath);
          if (hasReference) {
            matchedDocs.add(docFile);
          }
        }
      }
      console.log(`[\u56FE\u7247\u5F15\u7528\u641C\u7D22] \u5F00\u59CB\u641C\u7D22\u5F15\u7528\u56FE\u7247 ${imageName} \u7684\u6587\u6863...`);
      const searchFunction = (0, import_obsidian8.prepareSimpleSearch)(imageName);
      const batchSize = 30;
      let processed = 0;
      let found = 0;
      for (let i = 0; i < mdFiles.length; i += batchSize) {
        const batch = mdFiles.slice(i, i + batchSize);
        await new Promise((resolve) => {
          setTimeout(async () => {
            for (const file of batch) {
              if (matchedDocs.has(file)) {
                continue;
              }
              if (file.stat.size > 1024 * 1024) {
                continue;
              }
              processed++;
              try {
                const content = await this.app.vault.cachedRead(file);
                if (searchFunction(content)) {
                  const hasReference = await this.documentContainsImageReference(file, imagePath);
                  if (hasReference) {
                    matchedDocs.add(file);
                    found++;
                  }
                }
              } catch (error) {
                console.log(`[\u56FE\u7247\u5F15\u7528\u641C\u7D22] \u5904\u7406\u6587\u4EF6 ${file.path} \u65F6\u51FA\u9519: ${error}`);
              }
            }
            if (processed % 100 === 0 || i + batchSize >= mdFiles.length) {
              const progress = Math.round(processed / mdFiles.length * 100);
              console.log(`[\u56FE\u7247\u5F15\u7528\u641C\u7D22] \u8FDB\u5EA6: ${progress}%, \u5DF2\u627E\u5230 ${found} \u4E2A\u5F15\u7528`);
            }
            resolve();
          }, 0);
        });
      }
      console.log(`[\u56FE\u7247\u5F15\u7528\u641C\u7D22] \u5B8C\u6210\uFF0C\u5171\u5904\u7406 ${processed} \u4E2A\u6587\u6863\uFF0C\u627E\u5230 ${found} \u4E2A\u5F15\u7528`);
      return Array.from(matchedDocs);
    } catch (error) {
      console.error(`\u67E5\u627E\u5F15\u7528\u56FE\u7247 ${imagePath} \u7684\u6587\u6863\u65F6\u51FA\u9519:`, error);
      return [];
    }
  }
};

// src/managers/file-explorer-enhancer.ts
var FileExplorerEnhancer = class {
  constructor(app, assetManager, viewManager) {
    this.fileExplorerLeaf = null;
    this.expansionState = /* @__PURE__ */ new Map();
    // 记录展开状态：文档路径 -> 是否展开
    this.styleElement = null;
    // 样式元素
    this.isHidden = false;
    // 是否隐藏图片文件夹
    this.mutationObserver = null;
    // DOM变化观察器
    this._processingRename = null;
    // 处理中的重命名路径，防止重复处理
    this._mutationCount = 0;
    this._mutationPaused = false;
    this._renameHandleCount = 0;
    this._processingRenamePaths = /* @__PURE__ */ new Set();
    this._lastRenameStack = "";
    this.app = app;
    this.assetManager = assetManager;
    this.viewManager = viewManager;
  }
  /**
   * 初始化文件浏览器增强
   * @param isHidingAssetFolders 是否隐藏资源文件夹
   */
  initialize(isHidingAssetFolders) {
    this.findFileExplorerLeaf();
    this.registerEventListeners();
    this.applyAssetFolderVisibility(isHidingAssetFolders);
  }
  /**
   * 注册事件监听器
   */
  registerEventListeners() {
    const handleDocumentRenamedEvent = (evt) => {
      const { oldPath, newPath, transactionId } = evt.detail;
      this.handleDocumentRename(oldPath, newPath, transactionId);
    };
    window.removeEventListener("enhanced-publisher:document-renamed", handleDocumentRenamedEvent);
    window.addEventListener("enhanced-publisher:document-renamed", handleDocumentRenamedEvent);
  }
  /**
   * 处理文档重命名 - 文件浏览器UI更新
   * @param oldPath 旧文档路径
   * @param newPath 新文档路径
   * @param transactionId 事务ID，用于防止重复处理
   */
  handleDocumentRename(oldPath, newPath, transactionId) {
    if (transactionId && this._currentTransactionId === transactionId) {
      return;
    }
    this._currentTransactionId = transactionId;
    try {
      this.cleanupExistingElements(oldPath);
      const wasExpanded = this.expansionState.get(oldPath) || false;
      if (wasExpanded) {
        this.expansionState.set(newPath, wasExpanded);
        this.expansionState.delete(oldPath);
      }
      this.cleanupExistingElements(newPath);
      this.rebuildDocumentIndicator(newPath);
    } catch (e) {
      console.error(`[\u6587\u4EF6\u6D4F\u89C8\u5668] \u5904\u7406\u6587\u6863\u91CD\u547D\u540D\u65F6\u51FA\u9519:`, e);
    }
  }
  /**
   * 重建文档指示器
   * @param docPath 文档路径
   */
  rebuildDocumentIndicator(docPath) {
    console.log(`[\u6587\u4EF6\u6D4F\u89C8\u5668-\u91CD\u5EFA] \u5F00\u59CB\u91CD\u5EFA\u6587\u6863\u6307\u793A\u5668: ${docPath}`);
    let attempts = 0;
    const maxAttempts = 3;
    const findAndEnhanceElement = () => {
      const docElement = document.querySelector(
        `.nav-file-title[data-path="${docPath}"], 
                 .tree-item-self[data-path="${docPath}"]`
      );
      const folderPath = docPath.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
      const folderElement = document.querySelector(
        `.nav-folder-title[data-path="${folderPath}"], 
                 .tree-item-self[data-path="${folderPath}"]`
      );
      if (!docElement || !folderElement) {
        attempts++;
        if (attempts < maxAttempts) {
          console.log(`[\u6587\u4EF6\u6D4F\u89C8\u5668-\u91CD\u5EFA] \u672A\u627E\u5230\u6587\u6863\u6216\u8D44\u6E90\u6587\u4EF6\u5939\u5143\u7D20\uFF0C\u7B2C${attempts}\u6B21\u5C1D\u8BD5: ${docPath} ${folderPath}`);
          window.requestAnimationFrame(findAndEnhanceElement);
          return;
        } else {
          console.log(`[\u6587\u4EF6\u6D4F\u89C8\u5668-\u91CD\u5EFA] \u591A\u6B21\u5C1D\u8BD5\u540E\u4ECD\u672A\u627E\u5230\u6587\u6863\u6216\u8D44\u6E90\u6587\u4EF6\u5939\u5143\u7D20: ${docPath} ${folderPath}`);
          return;
        }
      }
      this.enhanceDocumentElement(docElement, docPath, folderElement, folderPath);
    };
    findAndEnhanceElement();
  }
  /**
   * 清理现有元素，确保重建前的干净状态
   * @param docPath 文档路径
   */
  cleanupExistingElements(docPath) {
    const containers = document.querySelectorAll(`.document-images-container[data-doc-path="${docPath}"]`);
    if (containers.length > 0) {
      containers.forEach((container, index) => {
        this.viewManager.clearContainer(container);
        container.remove();
      });
    }
    const docElements = document.querySelectorAll(
      `.nav-file-title[data-path="${docPath}"], 
             .tree-item-self[data-path="${docPath}"]`
    );
    if (docElements.length > 0) {
      docElements.forEach((docElement, index) => {
        const indicators = docElement.querySelectorAll(".image-expand-indicator");
        indicators.forEach((indicator) => {
          const clone = indicator.cloneNode(true);
          if (indicator.parentNode) {
            indicator.parentNode.replaceChild(clone, indicator);
          }
          clone.remove();
        });
        const parent = docElement.parentElement;
        if (parent) {
          parent.classList.remove("has-images");
        }
      });
    }
  }
  /**
   * 切换资源文件夹隐藏状态
   * @param isHiding 是否隐藏
   */
  toggleAssetFolderVisibility(isHiding) {
    this.applyAssetFolderVisibility(isHiding);
  }
  applyAssetFolderVisibility(isHiding) {
    this.isHidden = isHiding;
    this.applyStyles(isHiding);
    if (isHiding) {
      this.setupMutationObserver();
      this.enhanceFileExplorer();
    } else {
      this.resetFileExplorer();
    }
  }
  /**
   * 寻找文件浏览器叶子
   */
  findFileExplorerLeaf() {
    this.fileExplorerLeaf = null;
    const fileExplorers = this.app.workspace.getLeavesOfType("file-explorer");
    if (fileExplorers.length > 0) {
      this.fileExplorerLeaf = fileExplorers[0];
    }
  }
  /**
   * 应用样式
   * @param isHiding 是否隐藏资源文件夹
   */
  applyStyles(isHiding) {
    if (this.styleElement) {
      this.styleElement.remove();
      this.styleElement = null;
    }
    this.styleElement = document.createElement("style");
    this.styleElement.id = CONSTANTS.STYLE_ELEMENT_ID;
    if (isHiding) {
      this.styleElement.textContent = `
                /* \u9690\u85CF\u8D44\u6E90\u6587\u4EF6\u5939 */
                .nav-folder-title[data-path$="${CONSTANTS.ASSETS_FOLDER_SUFFIX}"],
                .tree-item-self[data-path$="${CONSTANTS.ASSETS_FOLDER_SUFFIX}"],
                .nav-folder-title[data-path$="${CONSTANTS.ASSETS_FOLDER_SUFFIX}"] ~ .nav-folder-children,
                .tree-item-self[data-path$="${CONSTANTS.ASSETS_FOLDER_SUFFIX}"] ~ .tree-item-children {
                    display: none !important;
                }
                
                /* \u6709\u56FE\u7247\u7684\u6587\u6863\u6837\u5F0F */
                .has-images .nav-file-title,
                .has-images .tree-item-self {
                }
                
                /* \u56FE\u7247\u5BB9\u5668\u6837\u5F0F */
                .document-images-container {
                }
                
                /* \u5C55\u5F00\u6307\u793A\u5668\u6837\u5F0F */
                .image-expand-indicator {
                }
                
                /* \u56FE\u7247\u9879\u6837\u5F0F */
                .document-images-container .nav-file-title,
                .document-images-container .tree-item-self {
                }

                /* \u7F16\u8F91\u72B6\u6001\u6837\u5F0F */
                .nav-file-title.is-being-renamed {
                    background-color: var(--background-modifier-form-field);
                }

                /* \u91CD\u547D\u540D\u8F93\u5165\u6846\u6837\u5F0F */
                .enhanced-publisher-rename-input {
                    font-family: inherit;
                    font-size: inherit;
                    border: none !important;
                    outline: none !important;
                    box-shadow: none !important;
                    border-radius: 0 !important;
                    padding: 0 4px !important;
                    margin: 0 !important;
                    background-color: var(--background-modifier-form-field);
                    -webkit-appearance: none;
                    appearance: none;
                } 
            `;
    }
    document.head.appendChild(this.styleElement);
  }
  /**
   * 设置DOM变化观察器
   */
  setupMutationObserver() {
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
    }
    this.mutationObserver = new MutationObserver((mutations) => {
      if (this._mutationPaused) {
        return;
      }
      this._mutationCount++;
      if (this._processingRenamePaths.size > 0) {
        return;
      }
      requestAnimationFrame(() => {
        this.processFileExplorerChanges(mutations);
      });
    });
    const fileExplorer = this.getFileExplorerElement();
    if (fileExplorer) {
      this.mutationObserver.observe(fileExplorer, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ["class", "style", "data-path"]
      });
    }
  }
  /**
   * 获取文件浏览器DOM元素
   */
  getFileExplorerElement() {
    if (!this.fileExplorerLeaf) {
      this.findFileExplorerLeaf();
    }
    if (this.fileExplorerLeaf) {
      return this.fileExplorerLeaf.view.containerEl;
    }
    return null;
  }
  /**
   * 处理文件浏览器变化
   */
  processFileExplorerChanges(mutations) {
    if (!this.isHidden)
      return;
    const documentElements = document.querySelectorAll(
      `.nav-file-title[data-path$=".md"], 
             .tree-item-self[data-path$=".md"]`
    );
    documentElements.forEach((docElement) => {
      if (docElement.querySelector(".image-expand-indicator"))
        return;
      const docPath = docElement.getAttribute("data-path");
      if (!docPath)
        return;
      const folderPath = docPath.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
      const folderElement = document.querySelector(
        `.nav-folder-title[data-path="${folderPath}"], 
                 .tree-item-self[data-path="${folderPath}"]`
      );
      if (folderElement) {
        this.enhanceDocumentElement(docElement, docPath, folderElement, folderPath);
      }
    });
    const assetFolderElements = document.querySelectorAll(
      `.nav-folder-title[data-path$="${CONSTANTS.ASSETS_FOLDER_SUFFIX}"], 
             .tree-item-self[data-path$="${CONSTANTS.ASSETS_FOLDER_SUFFIX}"]`
    );
    assetFolderElements.forEach((folderEl) => {
      const folderPath = folderEl.getAttribute("data-path");
      if (!folderPath)
        return;
      const docPath = folderPath.replace(CONSTANTS.ASSETS_FOLDER_SUFFIX, ".md");
      const docElement = document.querySelector(
        `.nav-file-title[data-path="${docPath}"], 
                 .tree-item-self[data-path="${docPath}"]`
      );
      if (docElement && !docElement.querySelector(".image-expand-indicator")) {
        this.enhanceDocumentElement(docElement, docPath, folderEl, folderPath);
      }
    });
  }
  /**
   * 增强文件浏览器，添加图片折叠功能
   */
  enhanceFileExplorer() {
    console.log("[FileExplorerEnhancer] \u5F00\u59CB\u589E\u5F3A\u6587\u4EF6\u6D4F\u89C8\u5668");
    if (!this.isHidden) {
      console.log("[FileExplorerEnhancer] \u56FE\u7247\u6587\u4EF6\u5939\u672A\u9690\u85CF\uFF0C\u4E0D\u9700\u8981\u589E\u5F3A");
      return;
    }
    const attemptProcessFolders = async (retryCount = 0, maxRetries = 5) => {
      if (retryCount > maxRetries) {
        console.log(`[FileExplorerEnhancer] \u5DF2\u8FBE\u5230\u6700\u5927\u91CD\u8BD5\u6B21\u6570 ${maxRetries}\uFF0C\u505C\u6B62\u5904\u7406`);
        return;
      }
      if (!this.fileExplorerLeaf) {
        this.findFileExplorerLeaf();
        if (!this.fileExplorerLeaf) {
          console.log("[FileExplorerEnhancer] \u672A\u627E\u5230\u6587\u4EF6\u6D4F\u89C8\u5668\u53F6\u5B50\uFF0C\u7B49\u5F85\u540E\u91CD\u8BD5");
          setTimeout(() => attemptProcessFolders(retryCount + 1, maxRetries), 100);
          return;
        }
      }
      const assetFolders = await this.assetManager.detectAssetFolders();
      console.log(`[FileExplorerEnhancer] \u53D1\u73B0 ${assetFolders.size} \u4E2A\u8D44\u6E90\u6587\u4EF6\u5939\uFF0C\u5904\u7406\u4E2D...`);
      const fileExplorerEl = this.getFileExplorerElement();
      if (!fileExplorerEl) {
        console.log("[FileExplorerEnhancer] \u6587\u4EF6\u6D4F\u89C8\u5668\u5143\u7D20\u4E0D\u53EF\u8BBF\u95EE\uFF0C\u7B49\u5F85\u540E\u91CD\u8BD5");
        setTimeout(() => attemptProcessFolders(retryCount + 1, maxRetries), 100);
        return;
      }
      let processedCount = 0;
      let pendingDocs = [];
      for (const [docPath, folderPath] of assetFolders.entries()) {
        const existingIndicators = document.querySelectorAll(
          `.nav-file-title[data-path="${docPath}"] .image-expand-indicator, 
                     .tree-item-self[data-path="${docPath}"] .image-expand-indicator`
        );
        if (existingIndicators.length > 0) {
          processedCount++;
          continue;
        }
        const docElement = fileExplorerEl.querySelector(`.nav-file-title[data-path="${docPath}"]`);
        const folderElement = fileExplorerEl.querySelector(`.nav-folder[data-path="${folderPath}"]`) || fileExplorerEl.querySelector(`.nav-folder-title[data-path="${folderPath}"]`);
        if (docElement && folderElement) {
          console.log(`[FileExplorerEnhancer] \u5904\u7406\u6587\u6863: ${docPath}`);
          this.enhanceDocumentElement(docElement, docPath, folderElement, folderPath);
          processedCount++;
        } else {
          pendingDocs.push([docPath, folderPath]);
        }
      }
      console.log(`[FileExplorerEnhancer] \u6210\u529F\u5904\u7406 ${processedCount} \u4E2A\u6587\u6863\uFF0C\u5F85\u5904\u7406 ${pendingDocs.length} \u4E2A`);
      if (pendingDocs.length > 0 && retryCount < maxRetries) {
        const delay = Math.min(100 * Math.pow(1.5, retryCount), 1e3);
        console.log(`[FileExplorerEnhancer] \u5C06\u5728 ${delay}ms \u540E\u91CD\u8BD5\u672A\u5904\u7406\u7684 ${pendingDocs.length} \u4E2A\u6587\u6863`);
        setTimeout(() => attemptProcessFolders(retryCount + 1, maxRetries), delay);
      }
    };
    attemptProcessFolders();
  }
  /**
   * 增强文档元素
   * @param docElement 文档元素
   * @param docPath 文档路径
   * @param folderElement 文件夹元素
   * @param folderPath 文件夹路径
   */
  enhanceDocumentElement(docElement, docPath, folderElement, folderPath) {
    let titleElement;
    titleElement = docElement;
    if (titleElement.querySelector(".image-expand-indicator")) {
      console.log(`[FileExplorerEnhancer] \u6587\u6863\u5DF2\u6709\u6307\u793A\u5668\uFF0C\u8DF3\u8FC7: ${docPath}`);
      return;
    }
    const docParent = docElement.parentElement;
    if (docParent) {
      docParent.classList.add("has-images");
    } else {
      docElement.classList.add("has-images");
    }
    const indicator = this.createExpandIndicator(titleElement, docPath, folderPath);
    titleElement.insertBefore(indicator, titleElement.firstChild);
    const existingContainer = document.querySelector(`.document-images-container[data-doc-path="${docPath}"]`);
    if (existingContainer) {
      console.log(`[FileExplorerEnhancer] \u6587\u6863\u5DF2\u6709\u56FE\u7247\u5BB9\u5668\uFF0C\u8DF3\u8FC7\u521B\u5EFA: ${docPath}`);
      return;
    }
    this.createImagesContainer(docPath, folderPath, docElement);
  }
  /**
   * 创建展开指示器
   * @param docElement 文档元素
   * @param docPath 文档路径
   * @param folderPath 文件夹路径
   */
  createExpandIndicator(docElement, docPath, folderPath) {
    const isExpanded = this.expansionState.get(docPath) || false;
    const indicator = document.createElement("div");
    indicator.classList.add("tree-item-icon", "collapse-icon", "image-expand-indicator");
    indicator.classList.toggle("is-collapsed", !isExpanded);
    indicator.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon right-triangle">
            <path d="M3 8L12 17L21 8"></path>
        </svg>`;
    indicator.addEventListener("click", (evt) => {
      evt.stopPropagation();
      evt.preventDefault();
      const isCurrentlyCollapsed = indicator.classList.contains("is-collapsed");
      this.toggleExpansion(docPath, isCurrentlyCollapsed, indicator);
    });
    return indicator;
  }
  /**
   * 创建图片容器
   * @param docPath 文档路径
   * @param folderPath 文件夹路径
   * @param docElement 文档元素
   */
  createImagesContainer(docPath, folderPath, docElement) {
    const isExpanded = this.expansionState.get(docPath) || false;
    const parent = docElement.parentElement;
    if (!parent)
      return;
    const container = this.viewManager.createImageContainer({
      docPath,
      folderPath,
      isExpanded
    });
    if (docElement.nextSibling) {
      parent.insertBefore(container, docElement.nextSibling);
    } else {
      parent.appendChild(container);
    }
    this.loadImagesIntoContainer(container, folderPath, docPath);
  }
  /**
   * 加载图片到容器中
   * @param container 容器元素
   * @param folderPath 资源文件夹路径
   * @param docPath 文档路径
   */
  async loadImagesIntoContainer(container, folderPath, docPath) {
    if (!container || !container.isConnected) {
      return;
    }
    try {
      await this.viewManager.updateImagesContainer(container, folderPath, docPath);
      const isExpanded = this.expansionState.get(docPath) || false;
      container.style.display = isExpanded ? "block" : "none";
      this.saveExpansionState();
    } catch (error) {
      console.error(`[\u6587\u4EF6\u6D4F\u89C8\u5668] \u52A0\u8F7D\u56FE\u7247\u5230\u5BB9\u5668\u65F6\u51FA\u9519:`, error);
    }
  }
  /**
   * 切换展开状态
   * @param docPath 文档路径
   * @param expand 是否展开
   * @param indicator 指示器元素
   */
  toggleExpansion(docPath, expand, indicator) {
    this.expansionState.set(docPath, expand);
    if (indicator) {
      indicator.classList.toggle("is-collapsed", !expand);
    } else {
      const indicatorEls = document.querySelectorAll(
        `.nav-file-title[data-path="${docPath}"] .image-expand-indicator, 
                 .tree-item-self[data-path="${docPath}"] .image-expand-indicator`
      );
      if (indicatorEls.length > 0) {
        indicatorEls.forEach((el) => el.classList.toggle("is-collapsed", !expand));
      }
    }
    this.viewManager.setContainerVisibility(docPath, expand);
    this.saveExpansionState();
  }
  /**
   * 重置文件浏览器
   */
  resetFileExplorer() {
    document.querySelectorAll(".image-expand-indicator").forEach((el) => el.remove());
    document.querySelectorAll(".document-images-container").forEach((el) => el.remove());
    document.querySelectorAll(".has-images").forEach((el) => {
      el.classList.remove("has-images");
    });
    document.querySelectorAll(
      `.nav-folder-title[data-path$="${CONSTANTS.ASSETS_FOLDER_SUFFIX}"], 
             .tree-item-self[data-path$="${CONSTANTS.ASSETS_FOLDER_SUFFIX}"]`
    ).forEach((el) => {
      el.style.display = "";
    });
    this.saveExpansionState();
  }
  /**
   * 保存展开状态
   */
  saveExpansionState() {
  }
  /**
   * 刷新指定文档的图片容器
   * @param docPath 文档路径
   * @param forceUpdate 是否强制更新，默认为false
   */
  refreshDocumentContainer(docPath, forceUpdate = false) {
    if (!this.isHidden)
      return;
    this.viewManager.refreshDocumentView(docPath, forceUpdate);
  }
  /**
   * 全局展开所有文档图片
   * @param expand 是否展开
   */
  expandAllDocumentImages(expand) {
    document.querySelectorAll(".document-images-container").forEach((container) => {
      const docPath = container.getAttribute("data-doc-path");
      if (docPath) {
        this.toggleExpansion(docPath, expand);
      }
    });
  }
  /**
   * 清理资源
   */
  cleanup() {
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
      this.mutationObserver = null;
    }
    if (this.styleElement) {
      this.styleElement.remove();
      this.styleElement = null;
    }
    this.resetFileExplorer();
  }
  /**
   * 准备DOM变化观察器 - 公共方法用于暂停/恢复观察器
   * @param enable 是否启用观察器
   */
  prepareMutationObserver(enable) {
    if (enable) {
      this._mutationPaused = false;
    } else {
      this._mutationPaused = true;
    }
  }
};

// src/managers/view-manager.ts
var import_obsidian9 = require("obsidian");
var ViewManager = class {
  constructor(app, assetManager) {
    this.viewUpdateRegistry = /* @__PURE__ */ new Map();
    this.app = app;
    this.assetManager = assetManager;
    this.refreshContainersHandler = () => {
      this.refreshAllViews();
    };
    this.documentClickHandler = (evt) => {
      const target = evt.target;
      const isImageTitle = !!target.closest(".nav-file-title[data-path]") && !!target.closest(".document-images-container");
      if (!isImageTitle) {
        document.querySelectorAll(".document-images-container .is-active").forEach((el) => {
          el.classList.remove("is-active");
        });
      }
    };
  }
  /**
   * 初始化视图管理器
   */
  initialize() {
    this.registerEventListeners();
  }
  /**
   * 注册事件监听器
   */
  registerEventListeners() {
    window.addEventListener(CONSTANTS.EVENTS.REFRESH_CONTAINERS, this.refreshContainersHandler);
    document.addEventListener("click", this.documentClickHandler, true);
  }
  /**
   * 刷新文档视图
   * @param docPath 文档路径
   * @param forceUpdate 是否强制刷新，默认为false
   */
  refreshDocumentView(docPath, forceUpdate = false) {
    const containers = document.querySelectorAll(`.document-images-container[data-doc-path="${docPath}"]`);
    if (containers.length === 0) {
      return;
    }
    containers.forEach((container) => {
      const folderPath = container.getAttribute("data-folder-path");
      if (!folderPath) {
        return;
      }
      if (forceUpdate) {
        this.updateImagesContainer(container, folderPath, docPath);
        return;
      }
      const currentVersion = container.getAttribute("data-version");
      const lastUpdate = this.viewUpdateRegistry.get(docPath) || 0;
      if (!currentVersion || lastUpdate > parseInt(currentVersion)) {
        this.updateImagesContainer(container, folderPath, docPath);
      }
    });
  }
  /**
   * 创建图片容器
   * @param options 容器配置选项
   * @returns 创建的容器元素
   */
  createImageContainer(options) {
    const { docPath, folderPath, isExpanded = false, customClass = "" } = options;
    const container = document.createElement("div");
    container.classList.add("tree-item-children", "nav-folder-children", "document-images-container");
    if (customClass) {
      container.classList.add(customClass);
    }
    container.setAttribute("data-doc-path", docPath);
    container.setAttribute("data-folder-path", folderPath);
    container.style.display = isExpanded ? "block" : "none";
    const spacer = document.createElement("div");
    spacer.style.width = "100%";
    spacer.style.height = "0.1px";
    spacer.style.marginBottom = "0px";
    container.appendChild(spacer);
    return container;
  }
  /**
   * 更新图片容器
   * @param container 容器元素
   * @param folderPath 文件夹路径
   * @param docPath 文档路径
   * @param handleError 自定义错误处理函数
   * @returns Promise<void>
   */
  async updateImagesContainer(container, folderPath, docPath, handleError) {
    try {
      this.clearContainer(container);
      const spacer = document.createElement("div");
      spacer.style.width = "100%";
      spacer.style.height = "0.1px";
      spacer.style.marginBottom = "0px";
      container.appendChild(spacer);
      const folder = this.app.vault.getAbstractFileByPath(folderPath);
      if (!folder || !(folder instanceof import_obsidian9.TFolder)) {
        return;
      }
      const images = await this.assetManager.getImagesInFolder(folderPath);
      if (!container.isConnected) {
        return;
      }
      if (images.length > 0) {
        for (const image of images) {
          const itemWrapper = document.createElement("div");
          itemWrapper.classList.add("tree-item", "nav-file");
          const imageItem = this.createImageItem(image);
          itemWrapper.appendChild(imageItem);
          container.appendChild(itemWrapper);
        }
      }
      container.setAttribute("data-version", Date.now().toString());
      this.viewUpdateRegistry.set(docPath, Date.now());
    } catch (error) {
      console.error("\u66F4\u65B0\u56FE\u7247\u5BB9\u5668\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 清除容器内容并移除事件监听器
   * @param container 待清理的容器
   */
  clearContainer(container) {
    const elements = container.querySelectorAll("*");
    elements.forEach((el) => {
      if (el.parentNode) {
        const clone = el.cloneNode(false);
        while (el.firstChild) {
          clone.appendChild(el.firstChild);
        }
        el.parentNode.replaceChild(clone, el);
      }
    });
    container.innerHTML = "";
  }
  /**
   * 创建图片项
   * @param image 图片文件
   */
  createImageItem(image) {
    const imageTitle = document.createElement("div");
    imageTitle.classList.add("tree-item-self", "nav-file-title", "tappable", "is-clickable");
    imageTitle.setAttribute("data-path", image.path);
    imageTitle.setAttribute("draggable", "true");
    imageTitle.style.marginInlineStart = "-34px";
    imageTitle.style.paddingInlineStart = "58px";
    const innerContent = document.createElement("div");
    innerContent.classList.add("tree-item-inner", "nav-file-title-content");
    const fileName = image.name.substring(0, image.name.lastIndexOf("."));
    const fileExt = image.extension;
    innerContent.textContent = fileName;
    const extTag = document.createElement("div");
    extTag.classList.add("nav-file-tag");
    extTag.textContent = fileExt;
    imageTitle.appendChild(innerContent);
    imageTitle.appendChild(extTag);
    imageTitle.addEventListener("click", (evt) => {
      if (imageTitle.classList.contains("is-being-renamed")) {
        return;
      }
      evt.stopPropagation();
      evt.preventDefault();
      document.querySelectorAll(".document-images-container .is-active").forEach((el) => {
        el.classList.remove("is-active");
      });
      imageTitle.classList.add("is-active");
      this.app.workspace.openLinkText(image.path, "", false);
    });
    imageTitle.addEventListener("contextmenu", (evt) => {
      evt.preventDefault();
      evt.stopPropagation();
      const menu = new import_obsidian9.Menu();
      menu.addItem((item) => {
        item.setTitle("\u91CD\u547D\u540D").setIcon("pencil").onClick(() => {
          imageTitle.classList.add("has-focus", "is-being-renamed");
          const rect = innerContent.getBoundingClientRect();
          const inputEl = document.createElement("input");
          inputEl.type = "text";
          inputEl.value = fileName;
          inputEl.className = "enhanced-publisher-rename-input";
          inputEl.style.position = "absolute";
          inputEl.style.left = rect.left + "px";
          inputEl.style.top = rect.top + "px";
          inputEl.style.width = rect.width + "px";
          inputEl.style.height = rect.height + "px";
          inputEl.style.zIndex = "1000";
          inputEl.style.fontFamily = "inherit";
          inputEl.style.fontSize = "inherit";
          inputEl.style.border = "none";
          inputEl.style.outline = "none";
          inputEl.style.boxShadow = "none";
          inputEl.style.borderRadius = "0";
          inputEl.style.padding = "0 4px";
          inputEl.style.margin = "0";
          inputEl.style.backgroundColor = "var(--background-modifier-form-field)";
          document.body.appendChild(inputEl);
          inputEl.focus();
          inputEl.select();
          const finishRenaming = async (save) => {
            const newName = save ? inputEl.value.trim() : fileName;
            if (inputEl.parentNode === document.body) {
              document.body.removeChild(inputEl);
            }
            imageTitle.classList.remove("has-focus", "is-being-renamed");
            if (save && newName && newName !== fileName && newName.length > 0) {
              const folderPath = image.path.substring(0, image.path.lastIndexOf("/"));
              const newPath = `${folderPath}/${newName}.${fileExt}`;
              try {
                await this.app.vault.rename(image, newPath);
                if (folderPath.endsWith(CONSTANTS.ASSETS_FOLDER_SUFFIX)) {
                  const docPath = folderPath.substring(0, folderPath.lastIndexOf(CONSTANTS.ASSETS_FOLDER_SUFFIX)) + ".md";
                  this.refreshDocumentView(docPath, true);
                }
              } catch (error) {
                console.error("\u91CD\u547D\u540D\u56FE\u7247\u5931\u8D25:", error);
                new import_obsidian9.Notice(`\u91CD\u547D\u540D\u5931\u8D25: ${error instanceof Error ? error.message : String(error)}`);
              }
            }
          };
          const handleKeyDown = (e) => {
            if (e.key === "Enter") {
              e.preventDefault();
              inputEl.removeEventListener("keydown", handleKeyDown);
              inputEl.removeEventListener("blur", handleBlur);
              finishRenaming(true);
            } else if (e.key === "Escape") {
              e.preventDefault();
              inputEl.removeEventListener("keydown", handleKeyDown);
              inputEl.removeEventListener("blur", handleBlur);
              finishRenaming(false);
            }
          };
          inputEl.addEventListener("keydown", handleKeyDown);
          const handleBlur = () => {
            inputEl.removeEventListener("blur", handleBlur);
            inputEl.removeEventListener("keydown", handleKeyDown);
            finishRenaming(true);
          };
          inputEl.addEventListener("blur", handleBlur);
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u5220\u9664").setIcon("trash").onClick(() => {
          const modal = new import_obsidian9.Modal(this.app);
          modal.titleEl.setText("\u5220\u9664\u6587\u4EF6");
          const contentEl = modal.contentEl;
          contentEl.empty();
          contentEl.createEl("p", { text: `\u4F60\u786E\u5B9A\u8981\u5220\u9664\u56FE\u7247 "${fileName}.${fileExt}" \u5417\uFF1F` });
          contentEl.createEl("p", { text: "\u5B83\u5C06\u88AB\u79FB\u52A8\u5230\u7CFB\u7EDF\u56DE\u6536\u7AD9\u91CC\u3002" });
          const buttonContainer = modal.modalEl.createEl("div", { cls: "modal-button-container" });
          buttonContainer.createEl("button", {
            text: "\u5220\u9664",
            cls: "mod-warning",
            type: "button"
          }).addEventListener("click", async () => {
            modal.close();
            try {
              await this.app.vault.delete(image);
              const folderPath = image.path.substring(0, image.path.lastIndexOf("/"));
              if (folderPath.endsWith(CONSTANTS.ASSETS_FOLDER_SUFFIX)) {
                const docPath = folderPath.substring(0, folderPath.lastIndexOf(CONSTANTS.ASSETS_FOLDER_SUFFIX)) + ".md";
                this.refreshDocumentView(docPath, true);
              }
            } catch (error) {
              console.error("\u5220\u9664\u56FE\u7247\u5931\u8D25:", error);
              new import_obsidian9.Notice(`\u5220\u9664\u5931\u8D25: ${error instanceof Error ? error.message : String(error)}`);
            }
          });
          buttonContainer.createEl("button", {
            text: "\u53D6\u6D88",
            cls: "mod-cancel",
            type: "button"
          }).addEventListener("click", () => {
            modal.close();
          });
          modal.open();
        });
      });
      menu.showAtMouseEvent(evt);
    });
    return imageTitle;
  }
  /**
   * 刷新所有视图
   */
  refreshAllViews() {
    document.querySelectorAll(".document-images-container").forEach((container) => {
      const docPath = container.getAttribute("data-doc-path");
      if (docPath) {
        this.refreshDocumentView(docPath);
      }
    });
  }
  /**
   * 清理资源
   */
  cleanup() {
    this.viewUpdateRegistry.clear();
    window.removeEventListener(CONSTANTS.EVENTS.REFRESH_CONTAINERS, this.refreshContainersHandler);
    document.removeEventListener("click", this.documentClickHandler, true);
  }
  /**
   * 设置图片容器可见性
   * @param docPath 文档路径
   * @param isVisible 是否可见
   */
  setContainerVisibility(docPath, isVisible) {
    const containers = document.querySelectorAll(`.document-images-container[data-doc-path="${docPath}"]`);
    containers.forEach((container) => {
      container.style.display = isVisible ? "block" : "none";
      if (isVisible && container.children.length <= 1) {
        const folderPath = container.getAttribute("data-folder-path");
        if (folderPath) {
          this.updateImagesContainer(container, folderPath, docPath);
        }
      }
    });
  }
};

// src/managers/event-manager.ts
var import_obsidian10 = require("obsidian");
var EventManager = class {
  // 全局已处理事务集合
  constructor(app, plugin, assetManager, documentManager, fileExplorerEnhancer, viewManager) {
    this._processedPathsInTransaction = /* @__PURE__ */ new Set();
    this._transactionTimeout = null;
    this._isDocumentRenameInProgress = false;
    this._processedTransactions = /* @__PURE__ */ new Set();
    this.app = app;
    this.plugin = plugin;
    this.assetManager = assetManager;
    this.documentManager = documentManager;
    this.fileExplorerEnhancer = fileExplorerEnhancer;
    this.viewManager = viewManager;
    this.events = new import_obsidian10.Events();
  }
  /**
   * 生成事务ID
   */
  _generateTransactionId() {
    return Date.now().toString() + Math.random().toString().slice(2, 8);
  }
  /**
   * 开始新的重命名事务
   */
  startNewRenameTransaction(path) {
    this.clearRenameTransaction();
    this._currentRenameTransactionId = this._generateTransactionId();
    this._processedPathsInTransaction.clear();
    this._isDocumentRenameInProgress = true;
    this._transactionTimeout = setTimeout(() => {
      this.clearRenameTransaction();
    }, 1e4);
    return this._currentRenameTransactionId;
  }
  /**
   * 清理重命名事务
   */
  clearRenameTransaction() {
    if (this._transactionTimeout) {
      clearTimeout(this._transactionTimeout);
      this._transactionTimeout = null;
    }
    if (this._currentRenameTransactionId) {
      if (this._currentRenameTransactionId) {
        this._processedTransactions.add(this._currentRenameTransactionId);
        if (this._processedTransactions.size > 50) {
          const toRemove = Array.from(this._processedTransactions).slice(0, 10);
          toRemove.forEach((id) => this._processedTransactions.delete(id));
        }
      }
      this._currentRenameTransactionId = void 0;
      this._processedPathsInTransaction.clear();
      this._isDocumentRenameInProgress = false;
    }
  }
  /**
   * 标记路径在当前事务中已处理
   */
  markPathAsProcessedInTransaction(path) {
    if (!this._currentRenameTransactionId) {
      return;
    }
    this._processedPathsInTransaction.add(path);
  }
  /**
   * 注册事件处理器
   */
  registerEvents() {
    this._renameEventListener = (file, oldPath) => {
      if (!this.plugin.settings.hideImageFolders) {
        return;
      }
      if (file.path === oldPath) {
        return;
      }
      if (file instanceof import_obsidian10.TFile) {
        if (file.extension === "md") {
          try {
            this.handleDocumentRenameProcess(file, oldPath);
          } catch (e) {
            console.error("\u5904\u7406\u6587\u6863\u91CD\u547D\u540D\u65F6\u51FA\u9519:", e);
          }
        } else if (CONSTANTS.IMAGE_EXTENSIONS.includes(`.${file.extension}`)) {
          if (this.isInAssetFolder(file.path)) {
            try {
              this.handleImageFileRename(file, oldPath);
            } catch (e) {
              console.error("\u5904\u7406\u56FE\u7247\u91CD\u547D\u540D\u65F6\u51FA\u9519:", e);
            }
          }
        }
      } else if (file instanceof import_obsidian10.TFolder && this.isAssetFolder(file.path)) {
        try {
          this.handleAssetFolderRename(file, oldPath);
        } catch (e) {
          console.error("\u5904\u7406\u8D44\u6E90\u6587\u4EF6\u5939\u91CD\u547D\u540D\u65F6\u51FA\u9519:", e);
        }
      }
    };
    this.app.vault.on("rename", this._renameEventListener);
  }
  /**
   * 处理文档重命名过程
   * @param file 新的文件对象
   * @param oldPath 旧路径
   */
  async handleDocumentRenameProcess(file, oldPath) {
    const newPath = file.path;
    const oldAssetFolder = oldPath.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
    const newAssetFolder = newPath.replace(/\.md$/, CONSTANTS.ASSETS_FOLDER_SUFFIX);
    try {
      const existingTargetFolder = this.app.vault.getAbstractFileByPath(newAssetFolder);
      if (existingTargetFolder instanceof import_obsidian10.TFolder && oldPath !== newPath) {
        const tempPath = `${newAssetFolder}-temp-${Date.now()}`;
        await this.app.fileManager.renameFile(existingTargetFolder, tempPath);
      }
    } catch (error) {
      console.error("\u5904\u7406\u76EE\u6807\u6587\u4EF6\u5939\u51B2\u7A81\u65F6\u51FA\u9519:", error);
    }
    const transactionId = this.startNewRenameTransaction(oldPath);
    try {
      this.fileExplorerEnhancer.prepareMutationObserver(false);
      await this.documentManager.handleDocumentRename(file, oldPath);
      this.fileExplorerEnhancer.handleDocumentRename(oldPath, file.path, transactionId);
      this.viewManager.refreshDocumentView(file.path);
      const customEvent = new CustomEvent("enhanced-publisher:document-renamed", {
        detail: {
          oldPath,
          newPath: file.path,
          transactionId
        }
      });
      window.dispatchEvent(customEvent);
    } catch (error) {
      console.error("\u6587\u6863\u91CD\u547D\u540D\u8FC7\u7A0B\u51FA\u9519:", error);
    } finally {
      this.fileExplorerEnhancer.prepareMutationObserver(true);
      this.clearRenameTransaction();
    }
  }
  /**
   * 处理资源文件夹重命名
   * @param folder 新的文件夹对象
   * @param oldPath 旧路径
   */
  handleAssetFolderRename(folder, oldPath) {
    if (folder.path === oldPath) {
      return;
    }
    if (this._isDocumentRenameInProgress) {
      this.markPathAsProcessedInTransaction(folder.path);
      return;
    }
    const oldDocPath = oldPath.replace(CONSTANTS.ASSETS_FOLDER_SUFFIX, ".md");
    const newDocPath = folder.path.replace(CONSTANTS.ASSETS_FOLDER_SUFFIX, ".md");
    const docFile = this.app.vault.getAbstractFileByPath(newDocPath);
    if (docFile instanceof import_obsidian10.TFile) {
      this.assetManager.updateImageReferences(newDocPath, oldPath, folder.path);
    }
  }
  /**
   * 处理图片文件重命名
   * @param file 重命名后的图片文件
   * @param oldPath 旧路径
   */
  async handleImageFileRename(file, oldPath) {
    if (!this.isImageFile(file.path) || file.path === oldPath) {
      return;
    }
    console.log(`[\u56FE\u7247\u91CD\u547D\u540D] \u5904\u7406\u56FE\u7247\u91CD\u547D\u540D\uFF1A${oldPath} -> ${file.path}`);
    if (this._isDocumentRenameInProgress) {
      this.markPathAsProcessedInTransaction(file.path);
      return;
    }
    const associatedDocPath = this.assetManager.getDocumentPathFromImagePath(file.path);
    console.log(`[\u56FE\u7247\u91CD\u547D\u540D] \u641C\u7D22\u5F15\u7528\u56FE\u7247\u7684\u6587\u6863...`);
    const referencingDocs = await this.documentManager.findDocumentsReferencingImage(oldPath);
    console.log(`[\u56FE\u7247\u91CD\u547D\u540D] \u627E\u5230 ${referencingDocs.length} \u4E2A\u5F15\u7528\u8BE5\u56FE\u7247\u7684\u6587\u6863`);
    let updatedCount = 0;
    let updatedPaths = [];
    for (const docFile of referencingDocs) {
      console.log(`[\u56FE\u7247\u91CD\u547D\u540D] \u66F4\u65B0\u6587\u6863 ${docFile.path} \u4E2D\u7684\u56FE\u7247\u5F15\u7528`);
      const updated = await this.documentManager.updateImageReference(docFile, oldPath, file.path);
      if (updated) {
        updatedCount++;
        updatedPaths.push(docFile.path);
      }
    }
    console.log(`[\u56FE\u7247\u91CD\u547D\u540D] \u5DF2\u66F4\u65B0 ${updatedCount} \u4E2A\u6587\u6863\u7684\u56FE\u7247\u5F15\u7528`);
    for (const docPath of updatedPaths) {
      this.viewManager.refreshDocumentView(docPath);
    }
    if (associatedDocPath && !updatedPaths.includes(associatedDocPath)) {
      this.viewManager.refreshDocumentView(associatedDocPath);
    }
    new import_obsidian10.Notice(`\u5DF2\u66F4\u65B0 ${updatedCount} \u4E2A\u6587\u6863\u7684\u5F15\u7528`);
  }
  /**
   * 判断路径是否在资源文件夹中
   * @param path 文件路径
   */
  isInAssetFolder(path) {
    return this.assetManager.isInAssetFolder(path);
  }
  /**
   * 判断是否为图片文件
   * @param path 文件路径
   */
  isImageFile(path) {
    const extension = path.split(".").pop();
    return extension ? CONSTANTS.IMAGE_EXTENSIONS.includes(`.${extension}`) : false;
  }
  /**
   * 判断是否为资源文件夹
   * @param path 文件夹路径
   */
  isAssetFolder(path) {
    return path.endsWith(CONSTANTS.ASSETS_FOLDER_SUFFIX);
  }
  /**
   * 清理资源
   */
  cleanup() {
    if (this._renameEventListener) {
      this.app.vault.off("rename", this._renameEventListener);
    }
    this.clearRenameTransaction();
  }
};

// src/main.ts
var EnhancedPublisherPlugin = class extends import_obsidian11.Plugin {
  constructor() {
    super(...arguments);
    // 导出功能，便于其他模块调用
    this.showPublishModal = showPublishModal;
  }
  async onload() {
    console.log("\u52A0\u8F7D\u589E\u5F3A\u53D1\u5E03\u63D2\u4EF6");
    await this.loadSettings();
    this.initializeManagers();
    this.registerIcons();
    this.registerFeatures();
    this.initializeFileExplorer();
    this.registerView(
      HTML_PREVIEW_VIEW_TYPE,
      (leaf) => new HtmlPreviewView(leaf, this, "", "HTML\u9884\u89C8", null)
    );
  }
  initializeManagers() {
    this.assetManager = new AssetManager(this.app);
    this.viewManager = new ViewManager(this.app, this.assetManager);
    this.documentManager = new DocumentManager(this.app, this.assetManager);
    this.fileExplorerEnhancer = new FileExplorerEnhancer(
      this.app,
      this.assetManager,
      this.viewManager
    );
    this.eventManager = new EventManager(
      this.app,
      this,
      this.assetManager,
      this.documentManager,
      this.fileExplorerEnhancer,
      this.viewManager
    );
    this.assetManager.initialize();
    this.viewManager.initialize();
    this.eventManager.registerEvents();
  }
  registerIcons() {
    (0, import_obsidian11.addIcon)("enhanced-publisher", '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline></svg>');
    (0, import_obsidian11.addIcon)("file-with-images", '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><circle cx="10" cy="13" r="2"/><path d="M8 21l4-4 4 4"/></svg>');
  }
  registerFeatures() {
    this.registerEvent(
      this.app.workspace.on("editor-paste", (evt, editor, markdownView) => {
        console.log("\u6355\u83B7\u7C98\u8D34\u4E8B\u4EF6");
        handlePasteEvent.call(this, evt, editor, markdownView);
      })
    );
    this.addCommand({
      id: "preview-as-html",
      name: "\u4EE5HTML\u5F62\u5F0F\u9884\u89C8",
      hotkeys: [{ modifiers: ["Shift"], key: "p" }],
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian11.MarkdownView);
        if (markdownView) {
          if (!checking) {
            showHtmlPreview.call(this, markdownView);
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "publish-to-platform",
      name: "\u53D1\u5E03\u5230\u5185\u5BB9\u5E73\u53F0",
      hotkeys: [{ modifiers: ["Ctrl"], key: "p" }],
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian11.MarkdownView);
        if (markdownView) {
          if (!checking) {
            showPublishModal.call(this, markdownView);
          }
          return true;
        }
        return false;
      }
    });
    this.addSettingTab(new EnhancedPublisherSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian11.TFile && file.extension === "md") {
          menu.addItem((item) => {
            item.setTitle("\u4EE5HTML\u5F62\u5F0F\u9884\u89C8").setIcon("enhanced-publisher").onClick(() => {
              const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian11.MarkdownView);
              if (markdownView && markdownView.file === file) {
                showHtmlPreview.call(this, markdownView);
              } else {
                this.app.workspace.openLinkText(file.path, "", false).then(() => {
                  const newView = this.app.workspace.getActiveViewOfType(import_obsidian11.MarkdownView);
                  if (newView) {
                    showHtmlPreview.call(this, newView);
                  }
                });
              }
            });
          });
          menu.addItem((item) => {
            item.setTitle("\u53D1\u5E03\u5230\u5185\u5BB9\u5E73\u53F0").setIcon("enhanced-publisher").onClick(() => {
              const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian11.MarkdownView);
              if (markdownView && markdownView.file === file) {
                showPublishModal.call(this, markdownView);
              } else {
                this.app.workspace.openLinkText(file.path, "", false).then(() => {
                  const newView = this.app.workspace.getActiveViewOfType(import_obsidian11.MarkdownView);
                  if (newView) {
                    showPublishModal.call(this, newView);
                  }
                });
              }
            });
          });
        }
      })
    );
  }
  initializeFileExplorer() {
    this.app.workspace.onLayoutReady(() => {
      this.fileExplorerEnhancer.initialize(this.settings.hideImageFolders);
      console.log("\u6587\u4EF6\u6D4F\u89C8\u5668\u589E\u5F3A\u5DF2\u521D\u59CB\u5316");
    });
  }
  onunload() {
    console.log("\u5378\u8F7D\u589E\u5F3A\u53D1\u5E03\u63D2\u4EF6");
    this.fileExplorerEnhancer.cleanup();
    this.viewManager.cleanup();
    this.eventManager.cleanup();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    console.log("\u8BBE\u7F6E\u5DF2\u4FDD\u5B58\uFF0C\u6B63\u5728\u5237\u65B0\u6587\u4EF6\u6D4F\u89C8\u5668\u89C6\u56FE");
    this.fileExplorerEnhancer.cleanup();
    this.fileExplorerEnhancer.initialize(this.settings.hideImageFolders);
    window.dispatchEvent(new CustomEvent(CONSTANTS.EVENTS.REFRESH_CONTAINERS));
    if (this.settings.hideImageFolders) {
      console.log("\u7B49\u5F85\u5E03\u5C40\u5C31\u7EEA\u540E\u6267\u884C\u6587\u4EF6\u6D4F\u89C8\u5668\u589E\u5F3A");
      this.app.workspace.trigger("layout-change");
      this.app.workspace.onLayoutReady(() => {
        console.log("\u5E03\u5C40\u5C31\u7EEA\uFF0C\u6267\u884C\u6587\u4EF6\u6D4F\u89C8\u5668\u589E\u5F3A");
        this.fileExplorerEnhancer.enhanceFileExplorer();
      });
    }
  }
  // 包装微信发布功能供UI调用
  async publishToWechat(title, content, thumbMediaId = "", file) {
    return publishToWechat.call(this, title, content, thumbMediaId, file);
  }
};
